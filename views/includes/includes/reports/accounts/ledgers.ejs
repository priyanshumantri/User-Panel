<% if(pageName==="reportsLedgers" ) {%>
    <script>
        // Function to initialize DataTable
        function initializeDataTable() {
            // Set date data order
            const tableRows = table.querySelectorAll('tbody tr');

            tableRows.forEach(row => {
                const dateRow = row.querySelectorAll('td');
                const realDate = moment(dateRow[3].innerHTML, "DD MMM YYYY, LT").format(); // select date from 4th column in table
                dateRow[3].setAttribute('data-order', realDate);
            });

            // Init datatable --- more info on datatables: https://datatables.net/manual/
            datatable = $(table).DataTable({
                "info": false,
                'order': [],
                'paging': false, // Set the initial value
                'scrollX': true, // Set the height of the scrollable area (adjust as needed)
                'fixedColumns': {
                    leftColumns: 2, // Number of columns to freeze on the left
                },
            });

            // Hook export buttons
            const documentTitle = 'Ledger';
            var buttons = new $.fn.dataTable.Buttons(table, {
                buttons: [
                    {
                        extend: 'copyHtml5',
                        title: documentTitle
                    },
                    {
                        extend: 'excelHtml5',
                        title: documentTitle,
                        customize: function (xlsx) {
                            var sheet = xlsx.xl.worksheets['sheet1.xml'];
                            // Find the rows to add borders
                            $('row', sheet).each(function (index) {
                                if (index > ($('row', sheet).length - 4)) { // Selecting last three rows
                                    $('c[r^="F"], c[r^="E"], c[r^="D"]', this).each(function () { // Selecting specific columns (adjust the column indexes accordingly)
                                        $(this).attr('s', '2');
                                         // Applying style (assuming 's' is the index of the border style)
                                    });
                                }
                            });
                        }
                    },
                    {
                        extend: 'csvHtml5',
                        title: documentTitle
                    }

                ]
            }).container().appendTo($('#kt_datatable_example_buttons'));

            // Hook dropdown menu click event to datatable export buttons
            const exportButtons = document.querySelectorAll('#kt_datatable_example_export_menu [data-kt-export]');
            exportButtons.forEach(exportButton => {
                exportButton.addEventListener('click', e => {
                    e.preventDefault();

                    // Get clicked export value
                    const exportValue = e.target.getAttribute('data-kt-export');
                    const target = document.querySelector('.dt-buttons .buttons-' + exportValue);

                    // Trigger click event on hidden datatable export buttons
                    target.click();
                });
            });

            // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()
            const filterSearch = document.querySelector('[data-kt-filter="search"]');
            filterSearch.addEventListener('keyup', function (e) {
                datatable.search(e.target.value).draw();
            });
        }

        // Initialize DataTable on document ready
        KTUtil.onDOMContentLoaded(function () {
            table = document.querySelector('#kt_datatable_example');
            if (table) {
                initializeDataTable();
            }
        });
    </script>

    <script>
        $("#pdf").on("click", function () {
            if ($('#kt_datatable_example').DataTable().rows().count() === 0) {
                showError("No data to export")
                return
            }


            const tableData = [];
            $("#kt_datatable_example thead tr").each(function () {
                const rowData = [];
                $(this).find('th').each(function () {
                    rowData.push($(this).text());
                });
                tableData.push(rowData);
            })

            $('#kt_datatable_example tbody tr').each(function () {
                const rowData = [];
                $(this).find('td').each(function () {
                    rowData.push($(this).text());
                });
                tableData.push(rowData);
            });



            fetch("/export/pdf", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    data: tableData,
                    ledger :  $("#ledgerName").val()
                })
            }).then((res) => {
                if(res.status === 200) {
                    return res.json().then((data) => {
                        
                        window.open(data.message, '_blank');


                    })
                }
            })
        })
    </script>

    <script>
        

        // Example usage:
        setFinancialYearRangeForReport("<%=financialYear.fy%>");
    </script>

    <script>
        function getLedgerReport() {
            if ($("#ledgerName").val() === "") {
                showError("Please select a ledger")
                return;
            }
            const form = document.getElementById('ledgerForm');
            const formData = new FormData(form);
            const data = new URLSearchParams();

            for (const pair of formData) {
                data.append(pair[0], pair[1]); // Add '=' between key and value
            }

            fetch("/reports/accounts/ledgers", {
                method: "POST",
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: data
            }).then((data) => {
                if (data.status === 400) {

                    return data.json().then((message) => {
                        Swal.fire({
                            text: message.message,
                            icon: "error",
                            buttonsStyling: !1,
                            confirmButtonText: "Ok, got it!",
                            customClass: {
                                confirmButton: "btn btn-primary"
                            }
                        }).then((response) => {
                            if (response.isConfirmed) {
                                $("#newLedgerBTN").attr("data-kt-indicator", "off")
                                $("#newLedgerBTN").attr("disabled", false)
                            }
                        })
                    })

                } else if (data.status === 200) {
                    return data.json().then((info) => {
                        datatable.clear().draw();

                        info.finalTransactions.forEach((ledger) => {
                            let particulars = ledger.particulars;
                            if ($("#narration").val() === "true") {
                                particulars = ledger.narration;
                            }
                            datatable.row.add([
                                ledger.date,
                                particulars,
                                ledger.vchType,
                                ledger.vchNumber,
                                ledger.debit,
                                ledger.credit,
                                ledger.balance
                            ]).draw(false);
                        })

                        if (info.subLedgerData) {
                            info.subLedgerData.forEach((ledger) => {
                                let particulars = ledger.particulars;
                                if ($("#narration").val() === "true") {
                                    particulars = ledger.narration;
                                }
                                datatable.row.add([
                                    ledger.date,
                                    ` ${particulars} (Sub Ledger)`,
                                    ledger.vchType,
                                    ledger.vchNumber,
                                    ledger.debit,
                                    ledger.credit,
                                    ledger.balance
                                ]).draw(false);

                            })
                        }

                        var debitTotal = datatable.column(4).data().reduce(function (a, b) {
                            return parseFloat(a) + parseFloat(b)
                        }, 0)

                        var creditTotal = datatable.column(5).data().reduce(function (a, b) {
                            return parseFloat(a) + parseFloat(b)
                        }, 0)

                        let debitClosing = 0
                        let creditClosing = 0
                        debitClosing = debitTotal - creditTotal
                        creditClosing = creditTotal - debitTotal
                        if (debitTotal > creditTotal) {
                            debitClosing = debitTotal - creditTotal
                            creditClosing = 0
                        } else if (creditTotal > debitTotal) {
                            creditClosing = creditTotal - debitTotal
                            debitClosing = 0
                        }

                        datatable.row.add([
                            null,
                            null,
                            null,
                            null,
                            debitTotal,
                            creditTotal,
                            null
                        ]).draw(false);

                        datatable.row.add([
                            null,
                            null,
                            null,
                            "To Closing Balance",
                            creditClosing,
                            debitClosing,
                            null
                        ]).draw(false);

                        datatable.row.add([
                            null,
                            null,
                            null,
                            "Total",
                            debitTotal + creditClosing,
                            creditTotal + debitClosing,
                            null
                        ]).draw(false);

                        $('#kt_datatable_example tbody tr:nth-last-child(3)').addClass('third-last-row');
                        $('#kt_datatable_example tbody tr:nth-last-child(2)').addClass('two-last-row');
                    })
                } else if (data.status === 401) {
                    Swal.fire({
                        text: "You are not authorized to perform this action",
                        icon: "error",
                        buttonsStyling: !1,
                        confirmButtonText: "Ok, got it!",
                        customClass: {
                            confirmButton: "btn btn-primary"
                        }
                    }).then((data) => {
                        if (data.isConfirmed) {
                            $("#newLedgerBTN").attr("data-kt-indicator", "off")
                            $("#newLedgerBTN").attr("disabled", false)

                        }
                    })
                }
            })

        }
    </script>



    <%} %>