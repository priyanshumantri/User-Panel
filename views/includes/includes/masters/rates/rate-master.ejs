<% if(pageName==="rateMaster" ) {%>
    <script>
        // Function to initialize DataTable
        function initializeDataTable() {
            // Set date data order
            const tableRows = table.querySelectorAll('tbody tr');

            tableRows.forEach(row => {
                const dateRow = row.querySelectorAll('td');
                const realDate = moment(dateRow[3].innerHTML, "DD MMM YYYY, LT").format(); // select date from 4th column in table
                dateRow[3].setAttribute('data-order', realDate);
            });

            // Init datatable --- more info on datatables: https://datatables.net/manual/
            datatable = $(table).DataTable({
                "info": false,
                'order': [],
                'pageLength': 10,
                'scrollX': true, // Set the height of the scrollable area (adjust as needed)
                'fixedColumns': {
                    leftColumns: 2, // Number of columns to freeze on the left
                },
            });

            // Hook export buttons
            const documentTitle = 'Challan Report';
            var buttons = new $.fn.dataTable.Buttons(table, {
                buttons: [
                    {
                        extend: 'copyHtml5',
                        title: documentTitle
                    },
                    {
                        extend: 'excelHtml5',
                        title: documentTitle
                    },
                    {
                        extend: 'csvHtml5',
                        title: documentTitle
                    }
                ]
            }).container().appendTo($('#kt_datatable_example_buttons'));

            // Hook dropdown menu click event to datatable export buttons
            const exportButtons = document.querySelectorAll('#kt_datatable_example_export_menu [data-kt-export]');
            exportButtons.forEach(exportButton => {
                exportButton.addEventListener('click', e => {
                    e.preventDefault();

                    // Get clicked export value
                    const exportValue = e.target.getAttribute('data-kt-export');
                    const target = document.querySelector('.dt-buttons .buttons-' + exportValue);

                    // Trigger click event on hidden datatable export buttons
                    target.click();
                });
            });

            // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()
            const filterSearch = document.querySelector('[data-kt-filter="search"]');
            filterSearch.addEventListener('keyup', function (e) {
                datatable.search(e.target.value).draw();
            });
        }

        // Initialize DataTable on document ready
        KTUtil.onDOMContentLoaded(function () {
            table = document.querySelector('#kt_datatable_example');
            if (table) {
                initializeDataTable();
            }
        });
    </script>
    <script>
        $("#effectiveDate").flatpickr({
            dateFormat: "d-m-Y",
            defaultDate: "today" // Set today as the default date
        });
    </script>

 
  
    <script>
        function addRate() {
            $("#createRateForm").trigger("reset")
            $("#rateON").select2()
            $("#client").select2()
            const today = new Date();
            const day = String(today.getDate()).padStart(2, '0');
            const month = String(today.getMonth() + 1).padStart(2, '0'); // Month is 0-based
            const year = today.getFullYear();
            const formattedDate = `${day}-${month}-${year}`;

            $("#effectiveDate").val(formattedDate)
            $("#itemTableBody").empty()
            $("#rateSubmit").show()
            $("#rateUpdate").hide()
            $("#for").select2().prop("disabled", false)
            $("#from").select2().prop("disabled", false)
            $("#to").select2().prop("disabled", false)  
            $("#title").html("Add New Default Rate")
        }
    </script>


    <script>
        const fromValueElement = $("#fromValue")
        const toValueElement = $("#toValue")
        const chargeElement = $("#charge")
        const chargeTypeElement = $("#chargeType")
        const amountElement = $("#amount")
        const basicElement = $("#basic")
        $("document").ready(function () {
            $("#basic").on("keydown", function (event) {
                if (event.key === "Tab" && !event.shiftKey) {
                    if (parseInt($("#basic").val()) > 0) {

                        fromValueElement.prop("disabled", true)
                        toValueElement.prop("disabled", true)
                        amountElement.prop("disabled", true)
                        fromValueElement.val(0)
                        toValueElement.val(0)
                        amountElement.val(0)
                        if (chargeElement.val() === "") {
                            showError("Please Select Charge")
                        } else if (chargeTypeElement.val() === "") {
                            showError("Please Select Charge Type")
                        } else if (basicElement.val() < 1) {
                            showError("Please Add Atleast 1 In Basic")
                        } else {
                            chargeElement.focus()
                            addRow(fromValueElement.val(), toValueElement.val(), chargeElement.val(), $('#charge option:selected').text(), chargeTypeElement.val(), $('#chargeType option:selected').text(), amountElement.val(), basicElement.val())
                            basicElement.val(0)
                            fromValueElement.val(0)
                            toValueElement.val(0)
                            amountElement.val(0)
                            chargeElement.val(null)
                            chargeElement.select2()
                            chargeTypeElement.val(null)
                            chargeTypeElement.select2()
                            

                        }
                    } else {
                        $("#fromValue").prop("disabled", false)
                        $("#toValue").prop("disabled", false)
                        $("#amount").prop("disabled", false)
                        basicElement.val(0)
                    }
                }
            })

            $("#amount").on("keydown", function (event) {
                if (event.key === "Tab" && !event.shiftKey) {
                    if (chargeElement.val() === "") {
                        chargeElement.focus()
                        showError("Please Select Charge")
                    } else if (chargeTypeElement.val() === "") {
                        chargeTypeElement.focus()
                        showError("Please Select Charge Type")
                    } else if (toValueElement.val() < 1) {
                        toValueElement.focus()
                        showError("To Value Cannot Be 0")
                    } else if (amountElement.val() < 1) {
                        amountElement.focus()
                        showError("Amount Cannot be 0")
                    } else if (parseFloat(fromValueElement.val()) >= parseFloat(toValueElement.val())) {
                        showError("Please Enter Valid From & To Value")
                    } else {
                        chargeElement.focus()
                        addRow(fromValueElement.val(), toValueElement.val(), chargeElement.val(), $('#charge option:selected').text(), chargeTypeElement.val(), $('#chargeType option:selected').text(), amountElement.val(), basicElement.val())
                        basicElement.val(0)
                        fromValueElement.val(0)
                        toValueElement.val(0)
                        amountElement.val(0)
                        chargeElement.val(null)
                        chargeElement.select2()
                        chargeTypeElement.val(null)
                        chargeTypeElement.select2()
                        basicElement.prop("disabled", false)

                    }
                }
            })


            fromValueElement.on("input", function () {
                if (fromValueElement.val() > 0) {
                    basicElement.prop("disabled", true)
                } else {
                    basicElement.prop("disabled", false)
                }
            })

            toValueElement.on("input", function () {
                if (fromValueElement.val() > 0) {
                    basicElement.prop("disabled", true)
                } else {
                    basicElement.prop("disabled", false)
                }
            })


            amountElement.on("input", function () {
                if (fromValueElement.val() > 0) {
                    basicElement.prop("disabled", true)
                } else {
                    basicElement.prop("disabled", false)
                }
            })
        })
    </script>

    <script>
        function addRow(from, to, charge, chargeText, chargeType, chargeTypeText, amount, basic) {


            const tbody = $("#itemTableBody")

            const tr = document.querySelectorAll("#itemTableBody tr")

            const data = `
            <tr class="border-bottom border-bottom-dashed"
                                                        data-kt-element="item" data-rowid="${tr.length + 1}">
                                                        <td class="pe-7">
                                                            ${tr.length + 1}
                                                        </td>

                                                        <td class="pe-7">
                                                            <select disabled class="form-select form-select-solid" data-placeholder="Select Charge" name="charge" id="charge${tr.length + 1}">
                                                                
                                                       
                                                                <option value="${charge}">${chargeText}</option>    
                                                       
                                                    
                                                            </select>
                                                        </td>

                                                        <td class="pe-7">
                                                            <select disabled class="form-select form-select-solid" data-placeholder="Select Charge Type" name="chargeType" id="chargeType${tr.length + 1}">
                                                                
                                                       
                                                                <option value="${chargeType}">${chargeTypeText}</option>    
                                                       
                                                    
                                                            </select>
                                                        </td>

                                                        <td class="pe-7">
                                                            <input value="${basic}" id="basic${tr.length + 1}" disabled type="text" class="form-control form-control-solid" name="basic">
                                                        </td>

                                                        <td class="pe-7">
                                                            <input value="${from}" id="fromValue${tr.length + 1}" disabled type="text" class="form-control form-control-solid" name="fromValue">
                                                        </td>

                                                        <td class="pe-7">
                                                            <input value="${to}" id="toValue${tr.length + 1}" disabled type="text" class="form-control form-control-solid" name="toValue">
                                                        </td>
                                                        <td class="pe-7">
                                                            <input value="${amount}" id="amount${tr.length + 1}" disabled type="text" class="form-control form-control-solid" name="amount">
                                                        </td>
                                                        <td class="pe-7">
                                                            <button onclick="deleteRow(${tr.length + 1})" type="button" class="btn btn-sm btn-icon btn-danger btn-active-color-grey remove-item" data-kt-element="remove-item">
                                                                <i class="ki-duotone ki-trash fs-3"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span></i>
                                                              </button>
                                                        </td>
                                                    </tr>   
            `

            tbody.append(data)
            $("#charge").focus()
            $("#for").prop("disabled", true)
        }
    </script>
    <script>
        function showError(message) {
            Swal.fire({
                text: message,
                icon: "error",
                buttonsStyling: !1,
                confirmButtonText: "Ok, got it!",
                customClass: {
                    confirmButton: "btn btn-primary"
                }
            })


        }
    </script>

    <script>
        function deleteRow(id) {
            // Find the specific row with the given data-rowid.
            var rowToDelete = document.querySelector(`tr[data-rowid="${id}"]`);

            if (rowToDelete) {
                rowToDelete.remove();

            } else {
                showError("ROW NOT FOUND");
            }
        }
    </script>

    <script>
        function createRate() {


            const tr = document.querySelectorAll("#itemTableBody tr")
            if ($("#for").val() === "client" && $("#client").val() === "") {
                showError("Please Select Client Name")
            } else if ($("#rateON").val() === "") {
                showError("Please Select Rate ON")
            } else if ($("#effectiveDate").val() === "") {
                showError("Please Select Effective Date")
            } else if ($("#from").val() === "") {
                showError("Please Add Atleast 1 From City")
            } else if ($("#to").val() === "") {
                showError("Please Add Atleast 1 To CIty")
            } else if (tr.length < 1) {
                showError("Please Add Atleast 1 Default Rate")
            } else {
                const form = document.getElementById("createRateForm");

                // Enable disabled inputs and selects
                const disabledInputs = form.querySelectorAll("input[disabled], select[disabled]");
                for (const input of disabledInputs) {
                    input.removeAttribute("disabled");
                }

                // Serialize the form data
                const formData = new FormData(form);

                // Re-disable previously disabled inputs and selects
                for (const input of disabledInputs) {
                    input.setAttribute("disabled", "disabled");
                }

                // Create a URLSearchParams object and add form data to it
                const data = new URLSearchParams();
                for (const pair of formData) {
                    data.append(pair[0], pair[1]);
                }
                fetchPostRequest("/masters/rates/rate-master", data, "Rate ON Added")

             
            }





        }
    </script>

    <script>
        function editDefaultRate(id) {
            $("#title").html("Edit Default Rate")
            $("#createRateForm").trigger("reset")
            $("#from").val(null)
            $("#to").val(null)
            $("#rateSubmit").hide()
            $("#rateUpdate").show()
            $("#itemTableBody").empty()
            fetchGetRequest(`/masters/rates/rate-master/edit?id=${id}`).then((data)=> {
      
                $("#rateID").val(data._id)
                        $("#client").val(data.client).select2()
                        $("#rateON").val(data.rateON).select2()
                      
                            $("#from").val(data.from).select2()
                            $("#to").val(data.to).select2()
                        $("#effectiveDate").val(data.effectiveDate)
                        addEditRow(data.defaultRate)
                        $("#kt_modal_2").modal("show")

            })
        }
    </script>

    <script>
        function addEditRow(newData) {
            const tbody = $("#itemTableBody")

            newData.forEach((data, index) => {

                const row = `
                                            <tr class="border-bottom border-bottom-dashed"
                                            data-kt-element="item" data-rowid="${index + 1}">
                                            <td class="pe-7">
                                                ${index + 1}
                                            </td>

                                            <td class="pe-7">
                                                <select data-control="select2" class="form-select form-select-solid" data-placeholder="Select Charge" name="charge" id="charge${index + 1}">
                                                        <option></option>
                                                        <option value="freight">Freight</option>
                                                        <option value="collection">Collection</option>
                                                        <option value="delivery">Delivery</option>
                                                        <option value="labour">Labour</option>
                                                        <option value="rebooking">Rebooking</option>
                                                        <option value="loadingDetention">Loading Detention</option>
                                                        <option value="unloadingDetention">Unloading Detention</option>
                                                        <option value="demmurage">Demmurage</option>
                                                        <option value="unloading">Unloading</option>
                                                        <option value="exWeight">Extra Weight</option>
                                                        <option value="exHeight">Extra Height</option>
                                                        <option value="st">ST</option>
                                                        <option value="others">Others</option>
                                           
                                        
                                                </select>
                                            </td>

                                            <td class="pe-7">
                                                <select data-control="select2" class="form-select form-select-solid" data-placeholder="Select Charge Type" name="chargeType" id="chargeType${index + 1}">
                                                          <option></option>    
                                                        <option value="actualWeight">Actual Weight</option>
                                                        <option value="chargedWeight">Charged Weight</option>
                                                        <option value="PKG">Package</option>
                                                        <option value="FTL">FTL (Fix)</option>
                                        
                                                </select>
                                            </td>

                                            <td class="pe-7">
                                                <input value="${data.basic}" id="basic${index + 1}" type="text" class="basic form-control form-control-solid" name="basic">
                                            </td>

                                            <td class="pe-7">
                                                <input value="${data.from}" id="fromValu${index + 1}"type="text" class="from form-control form-control-solid" name="fromValue">
                                            </td>

                                            <td class="pe-7">
                                                <input value="${data.to}" id="toValue${index + 1}"  type="text" class="to form-control form-control-solid" name="toValue">
                                            </td>
                                            <td class="pe-7">
                                                <input value="${data.amount}" id="amount${index + 1}"  type="text" class="amount form-control form-control-solid" name="amount">
                                            </td>
                                            <td class="pe-7">
                                                <button onclick="deleteRow(${index + 1})" type="button" class="btn btn-sm btn-icon btn-danger btn-active-color-grey remove-item" data-kt-element="remove-item">
                                                    <i class="ki-duotone ki-trash fs-3"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span></i>
                                                  </button>
                                            </td>
                                        </tr>   
                                    `

                tbody.append(row)

                $(`#charge${index + 1} option`).each(function () {
                    if ($(this).val() === data.charge) {
                        $(this).prop('selected', true);
                    }
                })
                $(`#charge${index + 1}`).select2()
                $(`#chargeType${index + 1} option`).each(function () {
                    if ($(this).val() === data.chargeType) {
                        $(this).prop('selected', true);
                    }
                });
                $(`#chargeType${index + 1}`).select2()

                $(".basic").on("keydown", function (event) {
                    if (event.key === "Tab" && !event.shiftKey) {


                        const closestTableRow = $(this).closest("tr");
                        const basicInput = closestTableRow.find("input[name='basic']");
                        const fromInput = closestTableRow.find("input[name='fromValue']");
                        const toInput = closestTableRow.find("input[name='toValue']");
                        const amountInput = closestTableRow.find("input[name='amount']");
                        const chargeInput = closestTableRow.find("input[name='charge']");
                        const chargeTypeInput = closestTableRow.find("input[name='chargeType']");
                        if (basicInput.val() > 0) {

                            fromInput.prop("disabled", true)
                            toInput.prop("disabled", true)
                            amountInput.prop("disabled", true)
                            fromInput.val(0)
                            toInput.val(0)
                            amountInput.val(0)
                            if (chargeInput.val() === "") {
                                showError("Please Select Charge")
                            } else if (chargeTypeInput.val() === "") {
                                showError("Please Select Charge Type")
                            } else if (basicInput.val() < 1) {
                                showError("Please Add Atleast 1 In Basic")
                            } else {
                                chargeInput.focus()
                                basicInput.val(0)
                                fromInput.val(0)
                                toInput.val(0)
                                amountInput.val(0)


                            }
                        }
                    }
                })

                $(".from").on("input", function () {
                    const closestTableRow = $(this).closest("tr");
                    const fromInput = closestTableRow.find("input[name='fromValue']");
                    const basicInput = closestTableRow.find("input[name='basic']");
                    if (fromInput.val() > 0) {
                        basicInput.prop("disabled", true)
                    } else {
                        basicInput.prop("disabled", false)
                    }
                })

                $(".to").on("input", function () {
                    const closestTableRow = $(this).closest("tr");
                    const toInput = closestTableRow.find("input[name='toValue']");
                    const basicInput = closestTableRow.find("input[name='basic']");
                    if (toInput.val() > 0) {
                        basicInput.prop("disabled", true)
                    } else {
                        basicInput.prop("disabled", false)
                    }
                })

                $(".amount").on("input", function () {
                    const closestTableRow = $(this).closest("tr");
                    const amountInput = closestTableRow.find("input[name='amount']");
                    const basicInput = closestTableRow.find("input[name='basic']");
                    if (amountInput.val() > 0) {
                        basicInput.prop("disabled", true)
                    } else {
                        basicInput.prop("disabled", false)
                    }
                })

                amountElement.on("input", function () {
                    if (fromValueElement.val() > 0) {
                        basicElement.prop("disabled", true)
                    } else {
                        basicElement.prop("disabled", false)
                    }
                })


            })


        }
    </script>

    <script>
        function updateRate() {



            const tr = document.querySelectorAll("#itemTableBody tr")
            if ($("#client").val() === "") {
                showError("Please Select Client Name")
            } else if ($("#rateON").val() === "") {
                showError("Please Select Rate ON")
            } else if ($("#effectiveDate").val() === "") {
                showError("Please Select Effective Date")
            } else if ($("#from").val() === "") {
                showError("Please Add Atleast 1 From City")
            } else if ($("#to").val() === "") {
                showError("Please Add Atleast 1 To CIty")
            } else if (tr.length < 1) {
                showError("Please Add Atleast 1 Default Rate")
            } else {
                const form = document.getElementById("createRateForm");

                // Enable disabled inputs and selects
                const disabledInputs = form.querySelectorAll("input[disabled], select[disabled]");
                for (const input of disabledInputs) {
                    input.removeAttribute("disabled");
                }

                // Serialize the form data
                const formData = new FormData(form);

                // Re-disable previously disabled inputs and selects
                for (const input of disabledInputs) {
                    input.setAttribute("disabled", "disabled");
                }

                // Create a URLSearchParams object and add form data to it
                const data = new URLSearchParams();
                for (const pair of formData) {
                    data.append(pair[0], pair[1]);
                }
                fetchPostRequest("/masters/rates/rate-master/edit", data, "Rate ON Edited")

              
            }
        }
    </script>

    <script>
        function deleteRate(id) {
            Swal.fire({
            text: "Are you sure you want to delete this Default Client Rate?",
            icon: "warning",
            showCancelButton: !0,
            buttonsStyling: !1,
            confirmButtonText: "Yes, delete!",
            cancelButtonText: "No, cancel",
            customClass: {
                confirmButton: "btn fw-bold btn-danger",
                cancelButton: "btn fw-bold btn-active-light-primary"
            }
        }).then(response => {
            if (response.isConfirmed) {
                // Send the form data to the server

                const data = new URLSearchParams()
                data.append("id", id)
                fetchPostRequest("/masters/rates/rate-master/delete", data, "Default Rate Deleted")
              
            }
        })
        }
    </script>
    <script>
        $("#for").on("change", function(){
            if($(this).val() === "client") {
                $("#client").prop("disabled", false)
                $("#client").select2()

                $("#charge").empty()
                const emptyOption = `<option></option>`
                $("#charge").append(emptyOption)
                const option = `
                <option value="freight">Freight</option>
                <option value="collection">Collection</option>
                <option value="delivery">Delivery</option>
                <option value="labour">Labour</option>
                <option value="rebooking">Rebooking</option>
                <option value="loadingDetention">Loading Detention</option>
                <option value="unloadingDetention">Unloading Detention</option>
                <option value="demmurage">Demmurage</option>
                <option value="unloading">Unloading</option>
                <option value="exWeight">Extra Weight</option>
                <option value="exHeight">Extra Height</option>
                <option value="st">ST</option>
                <option value="others">Others</option>
                `
                $("#charge").append(option)
                $("#charge").select2()
                $("#charge").prop("disabled", false)
                
                
            } else {
                $("#client").prop("disabled", true)
                $("#client").val(null)
                $("#client").select2()

                $("#charge").empty()
                const emptyOption = `<option></option>`
                $("#charge").append(emptyOption)
                const option = `
                <option value="freight">Freight</option>
                <option value="labour">Labour</option>
                `
                $("#charge").append(option)
                $("#charge").select2()
                $("#charge").prop("disabled", false)
            }
        })
    </script>


    <%} %>