<% if(pageName==="ledgers" ) {%>
    <script src="../../../assets/js/custom/masters/ledgers/export-users.js"></script>
    <script src="../../../assets/js/custom/masters/ledgers/add.js"></script>

    <script>
        const table = $('#kt_datatable_example').DataTable();
        function initializeDataTable() {
            // Set date data order
            const tableRows = table.querySelectorAll('tbody tr');

            tableRows.forEach(row => {
                const dateRow = row.querySelectorAll('td');
                const realDate = moment(dateRow[3].innerHTML, "DD MMM YYYY, LT").format(); // select date from 4th column in table
                dateRow[3].setAttribute('data-order', realDate);
            });

            // Init datatable --- more info on datatables: https://datatables.net/manual/
            datatable = $(table).DataTable({
                "info": true,
                'order': [],
                'pageLength': 10,
                'scrollX': true, // Set the height of the scrollable area (adjust as needed)
                'fixedColumns': {
                    leftColumns: 2, // Number of columns to freeze on the left
                },
            });

            // Hook export buttons
            const documentTitle = 'Lorry Reciept (LR) Report';
            var buttons = new $.fn.dataTable.Buttons(table, {
                buttons: [
                    {
                        extend: 'copyHtml5',
                        title: documentTitle
                    },
                    {
                        extend: 'excelHtml5',
                        title: documentTitle
                    },
                    {
                        extend: 'csvHtml5',
                        title: documentTitle
                    }
                ]
            }).container().appendTo($('#kt_datatable_example_buttons'));

            // Hook dropdown menu click event to datatable export buttons
            const exportButtons = document.querySelectorAll('#kt_datatable_example_export_menu [data-kt-export]');
            exportButtons.forEach(exportButton => {
                exportButton.addEventListener('click', e => {
                    e.preventDefault();

                    // Get clicked export value
                    const exportValue = e.target.getAttribute('data-kt-export');
                    const target = document.querySelector('.dt-buttons .buttons-' + exportValue);

                    // Trigger click event on hidden datatable export buttons
                    target.click();
                });
            });

            // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()
            const filterSearch = document.querySelector('[data-kt-filter="search"]');
            filterSearch.addEventListener('keyup', function (e) {
                datatable.search(e.target.value).draw();
            });
        }

        // Initialize DataTable on document ready
        KTUtil.onDOMContentLoaded(function () {
            table = document.querySelector('#kt_datatable_example');
            if (table) {
                initializeDataTable();
            }
        });
    </script>

    <script>
        function editLedgers() {
            $("#name").prop("disabled", false)
            $("#group").prop("disabled", false).select2()

            //enabling all select and input elements
            $("input").each(function () {
                $(this).prop("disabled", false);
            });
            $("select").each(function () {
                $(this).prop("disabled", false).select2()
            });
            const editBranch = document.getElementById("addLedger")
            const data = new URLSearchParams();
            for (const pair of new FormData(editBranch)) {
                data.append(pair[0], pair[1]);
            }

            const btn = $("#ledgerUpdateBTN")
            btn.attr("data-kt-indicator", "on")
            btn.attr("disabled", true)

            fetchPostRequest("/masters/ledgers/edit", data, "Ledger Updated Successfully", btn)

        }
    </script>
    <script>
        const today = new Date();
        const day = today.getDate().toString().padStart(2, '0');
        const month = (today.getMonth() + 1).toString().padStart(2, '0');
        const year = today.getFullYear();

        const formattedDate = `${day}-${month}-${year}`;
    </script>
    <script>
        $("#refDate").flatpickr()
        $("#refDate").val(formattedDate)
    </script>

    <script>
        function manipulateNameClass() {
            $("#gp").removeClass("col-lg-3")
            $("#gp").addClass("col-lg-4")
            $("#op").removeClass("col-lg-3")
            $("#op").addClass("col-lg-4")
            $("#opType").removeClass("col-lg-3")
            $("#opType").addClass("col-lg-4")
            $("#lowName").css("display", "none")
        }
    </script>

    <script>
        $("#group").on("change", function () {
            fetch(`/masters/ledgers/get-fields?id=${$(this).val()}`, {
                method: "GET"
            }).then((res) => {
                return res.json().then((data) => {
                    $("#fieldType").val(data.message)
                    const finalValue = data.message

                    $("#openingBalance").prop("disabled", false)
                    $("#openingBalanceType").prop("disabled", false)
                    if (finalValue == "superhigh") {
                        $("#sundrydebtorscreditors").css("display", "block")
                        $("#superhigh").css("display", "block")
                        $("#bankAccounts").css("display", "none")
                        $("#state").select2()
                        $("#city").select2()
                        manipulateNameClass()
                    } else if (finalValue == "high") {
                        //disabling enter of group name and ledger
                        $("#name").prop("disabled", true)
                        $("#superhigh").css("display", "none")
                        $("#sundrydebtorscreditors").css("display", "block")
                        $("#bankAccounts").css("display", "none")
                        //enabling opeing balance fields
                        $("#state").select2()
                        $("#city").select2()
                        manipulateNameClass()

                    } else if (finalValue == "medium") {
                        $("#sundrydebtorscreditors").css("display", "none")
                        $("#bankAccounts").css("display", "block")
                        $("#superhigh").css("display", "none")
                        $("#name").prop("disabled", true)
                        manipulateNameClass()
                    } else if (finalValue == "low") {
                        $("#sundrydebtorscreditors").css("display", "none")
                        $("#bankAccounts").css("display", "none")
                        $("#superhigh").css("display", "none")
                        $("#name").prop("disabled", true)
                        setTimeout(function () {
                            $("#openingBalance").focus()
                        }, 100)
                        $("#gp").removeClass("col-lg-4")
                        $("#gp").addClass("col-lg-3")
                        $("#op").removeClass("col-lg-4")
                        $("#op").addClass("col-lg-3")
                        $("#opType").removeClass("col-lg-4")
                        $("#opType").addClass("col-lg-3")
                        $("#lowName").css("display", "contents")

                    } else {
                        $("input").each(function () {
                            $(this).prop("disabled", true);
                        });
                        $("select").each(function () {
                            $(this).prop("disabled", true).select2()
                        });
                        $("#group").prop("disabled", false).select2()
                        $("#name").prop("disabled", false)
                        $("#sundrydebtorscreditors").css("display", "none")
                    }
                    setTimeout(function () {
                        $("#openingBalance").focus()
                    }, 100)
                })
            })

        })
    </script>
    <script>
        function addNewLedgerBTN() {

            $("#title").html("Add New Ledger")
            $("#ledgerCreateBTN").css("display", "block")
            $("#ledgerUpdateBTN").css("display", "none")
            $("#addLedger").trigger("reset")
            $("#sundrydebtorscreditors").css("display", "none")
            $("#superhigh").css("display", "none")
            $("#bankAccounts").css("display", "none")
            $("#fieldType").val("")
            setTimeout(() => {
                $("#name").focus()
            }, 200)

        }
    </script>
    <script>
        function newLedger() {

            const openingBalanceElement = $("#openingBalance");
                const openingBalanceTypeElement = $("#openingBalanceType");
        
            if(openingBalanceElement.val() == "" || openingBalanceTypeElement.val() == "") {
                showError("Please Enter Opening Balance and Type")
                return
            } else if($("#fieldType").val() == "superhigh") {
                const mobileElement = $("#mobile");
                const emailElement = $("#email");
                const addressElement = $("#address");
                const gstElement = $("#gstNumber");
                const panElement = $("#PAN");
                const aliasNameElement = $("#aliasName");
                const ledgerNameElement = $("#ledgerName");
                if (ledgerNameElement.val() == ""  || aliasNameElement.val() === "" ||  mobileElement.val() === "" || emailElement.val() === "" || addressElement.val() === "" || panElement.val() === "") {
                    showError("Please Select All Required Fields")
                } else if(gstElement.val() === "" && $("#entityType").val() == "registered"){
                    showError("GST Number is mandatory")
                } else {

                    //disabling all inputs and select elements
                    $("input").each(function () {
                        $(this).prop("disabled", true);
                    });
                    $("select").each(function () {
                        $(this).prop("disabled", true).select2()
                    });
                    //enabling only required inputs and select elements
                    $("#group").prop("disabled", false).select2()
                    $("#sundrydebtorscreditors input, #superhigh input").each(function () {
                        $(this).prop("disabled", false);
                    });
                    $("#sundrydebtorscreditors select, #superhigh select").each(function () {
                        $(this).prop("disabled", false).select2()
                    });
                    $("#ledgerName").prop("disabled", false)
                    $("#openingBalance").prop("disabled", false)
                    $("#openingBalanceType").prop("disabled", false)

                    $("#newLedgerBTN").attr("data-kt-indicator", "on")
                    $("#newLedgerBTN").attr("disabled", true)
                    $("#modalCloseBTN").attr("disabled", true)
                    submitNewLedger()
                }
            } else if ($("#fieldType").val() == "high") {
                const mobileElement = $("#mobile");
                const emailElement = $("#email");
                const addressElement = $("#address");
                const panElement = $("#PAN");
                const ledgerNameElement = $("#ledgerName");

                if ( ledgerNameElement.val() == ""  || mobileElement.val() === "" || emailElement.val() === "" || addressElement.val() === ""  || panElement.val() === "") {
                    showError("Please Fill All Required Fields")
                } else {

                    //disabling all inputs and select elements
                    $("input").each(function () {
                        $(this).prop("disabled", true);
                    });
                    $("select").each(function () {
                        $(this).prop("disabled", true).select2()
                    });

                    //enabling only required inputs and select elements
                    $("#group").prop("disabled", false).select2()
                    $("#sundrydebtorscreditors input").each(function () {
                        $(this).prop("disabled", false);
                    });
                    $("#sundrydebtorscreditors select").each(function () {
                        $(this).prop("disabled", false).select2()
                    });

                    $("#ledgerName").prop("disabled", false)
                    $("#openingBalance").prop("disabled", false)
                    $("#openingBalanceType").prop("disabled", false)

                    $("#newLedgerBTN").attr("data-kt-indicator", "on")
                    $("#newLedgerBTN").attr("disabled", true)
                    $("#modalCloseBTN").attr("disabled", true)
                    submitNewLedger()
                }


            } else if ($("#fieldType").val() == "medium") {
                const accountNumberElement = $("#accountNumber");
                const ifscElement = $("#IFSC");
                const bankBranchElement = $("#bankBranch");
                const ledgerNameElement = $("#ledgerNameMid");
                if (ledgerNameElement.val() == ""  || accountNumberElement.val() === "" || ifscElement.val() === "" || bankBranchElement.val() === "") {
                    showError("Please Set All Required Fields")
                    setTimeout(() => {
                        $("#accountNumber").focus()
                    }, 100)
                } else {

                    //disabling all inputs and select elements
                    $("input").each(function () {
                        $(this).prop("disabled", true);
                    });
                    $("select").each(function () {
                        $(this).prop("disabled", true).select2()
                    });

                    //enabling only required inputs and select elements
                    $("#group").prop("disabled", false).select2()
                    $("#bankAccounts input").each(function () {
                        $(this).prop("disabled", false);
                    });

                    $("#bankAccounts select").each(function () {
                        $(this).prop("disabled", false).select2()
                    });
                    $("#ledgerNameMid").prop("disabled", false)
                    $("#openingBalance").prop("disabled", false)
                    $("#openingBalanceType").prop("disabled", false)

                    $("#newLedgerBTN").attr("data-kt-indicator", "on")
                    $("#newLedgerBTN").attr("disabled", true)
                    $("#modalCloseBTN").attr("disabled", true)
                    submitNewLedger()
                }
            } else if ($("#fieldType").val() == "low") {
                const ledgerNameElement = $("#ledgerNameLow");
                if (ledgerNameElement.val() == "") {
                    showError("Please Set All Required Fields")
                } else {
                    $("#opeingBalance").prop("disabled", false)
                $("#openingBalanceType").prop("disabled", false)

                $("#newLedgerBTN").attr("data-kt-indicator", "on")
                $("#newLedgerBTN").attr("disabled", true)
                    $("#modalCloseBTN").attr("disabled", true)
                $("#group").prop("disabled", false)
                $("#ledgerNameLow").prop("disabled", false)
                submitNewLedger()
                }

              
            } else {
                showError("Other Group Fields Not Set Yet")
            }
        }
    </script>

    <script>
        function submitNewLedger() {
            $("#fieldType").prop("disabled", false)
            const e = document.getElementById("addLedger");
            const data = new URLSearchParams();
            for (const pair of new FormData(e)) {
                data.append(pair[0], pair[1]);
            }
            fetchPostRequest("/masters/ledgers/new", data, "New Ledger Added Successfully", $("#newLedgerBTN"), $("#modalCloseBTN"))

        }
    </script>
    <script>
        function editLedger(id) {

            fetchGetRequest(`/masters/ledgers/edit?id=${id}`).then((data) => {
                const info = data.ledgerData
                $("#newLedgerBTN").css("display", "none")
                $("#ledgerUpdateBTN").css("display", "block")
                $("#title").text(`Edit Ledger - ${info.name}`)
                $("#fieldType").val(data.message)
                $("#editID").val(info._id)
                if(data.message == "superhigh") {
                    
                    //disabling enter of group name and ledger
                    $("#ledgerName").prop("disabled", false).val(info.name).prop("disabled", true)
                    $("#group").prop("disabled", false).val(info.group).select2()
                    $("#sundrydebtorscreditors").css("display", "block")
                    $("#superhigh").css("display", "block")
                    $("#bankAccounts").css("display", "none")
                   
                    //enabling opeing balance fields
                    $("#personName").val(info.contactPerson)
                    $("#mobile").val(info.mobile)
                    $("#email").val(info.email)
                    $("#address").val(info.address).prop("disabled", true)
                    $("#gstNumber").val(info.taxation.GST).prop("disabled", false)
                  
                    $("#PAN").val(info.taxation.PAN).prop("disabled", true)
                    $("#entityType").val(info.entityType).select2()
                    if($("#entityType").val() == "unregistered") {
                        $("#gstNumber").prop("disabled", true)
                    } 
                    $("#aliasName").val(info.aliasName)
                    $("#openingBalance").prop("disabled", false).val(info.openingBalance.amount)
                    $("#openingBalanceType").prop("disabled", false).val(info.openingBalance.type).select2()
                    $("#state").prop("disabled", false).val(info.state).select2().prop("disabled", true)
                    $("#city").prop("disaled", false).val(info.city).select2()

                    $("#kt_modal_2").modal("show")
                }
                if (data.message == "high") {

                    //disabling enter of group name and ledger
                    $("#ledgerName").prop("disabled", false).val(info.name)
                    $("#group").prop("disabled", false).val(info.group).select2()
                    $("#sundrydebtorscreditors").css("display", "block")
                    $("#bankAccounts").css("display", "none")
                    $("#superhigh").css("display", "none")

                    //enabling opeing balance fields

                    $("#personName").val(info.contactPerson)
                    $("#mobile").val(info.mobile)
                    $("#email").val(info.email)
                    $("#address").val(info.address)
                    $("#PAN").val(info.taxation.PAN)
                    $("#openingBalance").prop("disabled", false).val(info.openingBalance.amount)
                    $("#openingBalanceType").prop("disabled", false).val(info.openingBalance.type).select2()
                    $("#state").prop("disabled", false).val(info.state).select2()
                    $("#city").prop("disaled", false).val(info.city).select2()

                    $("#kt_modal_2").modal("show")
                } else if (data.message == "medium") {
                    $("#sundrydebtorscreditors").css("display", "none")
                    $("#superhigh").css("display", "none")
                    $("#bankAccounts").css("display", "block")
                    $("#ledgerNameMid").prop("disabled", false).val(info.name)
                    $("#group").prop("disabled", false).val(info.group).select2()
                    $("#openingBalance").prop("disabled", false).val(info.openingBalance.amount)
                    $("#openingBalanceType").prop("disabled", false).val(info.openingBalance.type).select2()
                    $("#accountNumber").val(info.accountNumber)
                    $("#ifsc").val(info.ifsc)
                    $("#bankBranch").val(info.bankBranch)
                    $("#bankState").val(info.state).prop("disabled", false).select2()
                    $("#bankCity").val(info.city).prop("disaled", false).select2()
                    $("#kt_modal_2").modal("show")
                } else if (data.message == "low") {
                    $("#sundrydebtorscreditors").css("display", "none")
                    $("#superhigh").css("display", "none")
                    $("#bankAccounts").css("display", "none")
                    $("#ledgerNameLow").prop("disabled", false).val(info.name)
                    $("#group").val(info.group).prop("disabled", false).select2()
                    $("#openingBalance").prop("disabled", false).val(info.openingBalance.amount)
                    $("#openingBalanceType").val(info.openingBalance.type).prop("disabled", false).select2()
                    $("#kt_modal_2").modal("show")
                }
            })
        }
    </script>
    <script>
        function setOpeningBalance(id) {
            fetchGetRequest(`/masters/ledgers/get-opening-balance?id=${id}`).then((data) => {
                $("#kt_modal_stacked_3 #modalTitle").text(`Bill Wise Breakup of - ${data.name}. Upto ${data.openingBalance} ${data.openingBalanceType}`)
                $("#openingBalanceStore").val(data.openingBalance)
                $("#openingBalanceTypeStore").val(data.openingBalance)
                $("#ledgerID").val(data._id)
                $("#setRefTbody").empty()
                data.transactions.forEach((item) => {
                    addEditRowForOpeningBalance(item.id, item.date, item.name, item.due, item.amount, item.type)
                })
                calculateNetBalance()
                $("#kt_modal_stacked_3").modal("show")
                setTimeout(function () {
                    $("#refDate").focus()
                }, 500)
            })
        }
    </script>
    <script>
        function addEditRowForOpeningBalance(transactionID, refDate, refName, refDue, refAmt, refType) {
            const tbody = $("#setRefTbody")
            const length = tbody.find("tr").length + 1
            const newRow = `
                <tr data-rowid="${length}">
                    <td>
                                                    <input type="hidden" name="status" value="old">
                                                    <input type="hidden" name="transactionID" value="${transactionID}">
                                                <input class="form-control form-control-solid" type="text" name="refDate" value="${refDate}">
                                            </td>
                                            <td>
                                                <input  class="form-control form-control-solid" type="text" name="refName" value="${refName}">
                                            </td>
                                          
                                            <td>
                                                <input class="form-control form-control-solid" type="text" name="refDue" value="${refDue}">
                                            </td>
                                            <td>
                                                <input class="form-control form-control-solid" type="text" name="refAmt" value="${refAmt}">
                                            </td>
                                            <td>
                                                <input type="hidden" class="type" value="${refType}">
                                                <input class="form-control form-control-solid" type="text" name="refType" value="${refType.toUpperCase()}">
                                            </td>
                                            <td>
                                                <button style="margin-top: 0 !important;" onclick="deleteReference('${length}')"
                                                class="btn btn-flex btn-sm btn-light-danger mt-3 mt-md-9">
                                                <i class="ki-duotone ki-trash fs-3">
                                                    <span class="path1"></span>
                                                    <span class="path2"></span>
                                                    <span class="path3"></span>
                                                    <span class="path4"></span>
                                                    <span class="path5"></span></i>
    
                                            </button>
                                            </td>
                </tr>
                `

            tbody.append(newRow)
        }
    </script>
    <script>
        const refDate = $("#refDate")
        const refName = $("#refName")
        const refDue = $("#refDue")
        const refAmt = $("#refAmount")
        const refType = $("#refType")
    </script>
    <script>
        $('#refType').on("change", function () {
            if (refDate.val() == "" || refName.val() == "" || refDue.val() == "" || refAmt.val() == "" || refType.val() == "") {
                showError("Please Enter Valid Values")
                $("#refType").val(null).select2()
            } else {
                refType.select2('close')
                const tbody = $("#setRefTbody")
                const length = tbody.find("tr").length + 1
                const newRow = `
                <tr data-rowid="${length}">
                    <td>
                                                    <input type="hidden" name="status" value="new">
                                                <input disabled class="form-control form-control-solid" type="text" name="refDate" value="${refDate.val()}">
                                            </td>
                                            <td>
                                                <input disabled class="form-control form-control-solid" type="text" name="refName" value="${refName.val()}">
                                            </td>
                                          
                                            <td>
                                                <input disabled class="form-control form-control-solid" type="text" name="refDue" value="${refDue.val()}">
                                            </td>
                                            <td>
                                                <input disabled class="form-control form-control-solid" type="text" name="refAmt" value="${refAmt.val()}">
                                            </td>
                                            <td>
                                                <input type="hidden" class="type" value="${refType.val()}">
                                                <input disabled class="form-control form-control-solid" type="text" name="refType" value="${refType.val().toUpperCase()}">
                                            </td>
                                            <td>
                                                <button style="margin-top: 0 !important;" onclick="deleteReference('${length}')"
                                                class="btn btn-flex btn-sm btn-light-danger mt-3 mt-md-9">
                                                <i class="ki-duotone ki-trash fs-3">
                                                    <span class="path1"></span>
                                                    <span class="path2"></span>
                                                    <span class="path3"></span>
                                                    <span class="path4"></span>
                                                    <span class="path5"></span></i>
    
                                            </button>
                                            </td>
                </tr>
                `

                tbody.append(newRow)
                calculateNetBalance()
                refDate.val(formattedDate)
                refDue.val(0)
                refAmt.val(0)
                refName.val("")
                refType.val(null).select2()
                setTimeout(function () {
                    refDate.focus()
                }, 500)
            }
        })
    </script>

    <script>

        const openingBalance = $("#openingBalanceStore")
        const openingBalanceType = $("#openingBalanceTypeStore")
        function calculateNetBalance() {
            const amtInputs = $("#setRefTbody input[name='refAmt']")
            const typeInputs = $("#setRefTbody .type")

            let totalDR = 0
            let totalCR = 0

            for (let i = 0; i < amtInputs.length; i++) {
                const amtValue = parseFloat($(amtInputs[i]).val()); // Parse input value as float
                const typeValue = $(typeInputs.eq(i)).val(); // Use .eq() to access element by index

                if (typeValue == "dr") {
                    totalDR += amtValue;
                } else {
                    totalCR += amtValue;
                }
            }
            let netBalance = totalDR - totalCR
            let text = "Dr"
            if (netBalance < 0) {
                text = "Cr"
            }


            $("#netAmt").val(Math.abs(netBalance)).css("display", "block")
            $("#netType").val(text).css("display", "block")
            $("#netText").text("Total").css("display", "block")

            let opeAMT = parseFloat(openingBalance.val())
            if (openingBalanceType.val() == "cr") {
                opeAMT = parseFloat(openingBalance.val()) * -1
            }
            const onAccount = netBalance - opeAMT

            let text1 = "Dr"
            if (onAccount > 0) {
                text1 = "Cr"
            }

            $("#netAmt1").val(Math.abs(onAccount)).css("display", "block")
            $("#netType1").val(text1).css("display", "block")
            $("#netText1").text("On Account").css("display", "block")

            let text2 = "Dr"
            const netCALC = netBalance - onAccount
            if (netCALC < 0) {
                text2 = "Cr"
            }

            $("#netAmt2").val(Math.abs(netCALC)).css("display", "block")
            $("#netType2").val(text2).css("display", "block")
            $("#netText2").text("Net Balance").css("display", "block")

        }
    </script>
    <script>
        function submitReferences() {

            const amtInputs = $("#setRefTbody input[name='refAmt']")
            const typeInputs = $("#setRefTbody .type")
            let totalDR = 0
            let totalCR = 0
            for (let i = 0; i < amtInputs.length; i++) {
                const amtValue = parseFloat($(amtInputs[i]).val()); // Parse input value as float
                const typeValue = $(typeInputs.eq(i)).val(); // Use .eq() to access element by index

                if (typeValue == "dr") {
                    totalDR += amtValue;
                } else {
                    totalCR += amtValue;
                }
            }
            let netBalance = totalDR - totalCR
            if (netBalance < 0 && openingBalanceType == "dr") { //implies cr balance
                showError("Invalid References Recieved")
            } else if (netBalance > 0 && openingBalanceType == "cr") {
                showError("Invalid References Receieved")
            } else if (netBalance > 0 && openingBalanceType == "dr" && netBalance !== openingBalance) {
                showError("Invalid References Recieved")
            } else if (netBalance < 0 && openingBalanceType == "cr" && netBalance !== openingBalance) {
                showError("Invalid References Recieved")
            } else {

                //enabling all inputs and select elements
                $("input").each(function () {
                    $(this).prop("disabled", false);
                });
                $("select").each(function () {
                    $(this).prop("disabled", false).select2()
                });

                const form = document.getElementById("refForm")
                const data = new URLSearchParams();
                for (const pair of new FormData(form)) {
                    data.append(pair[0], pair[1])
                }

                fetchPostRequest("/masters/ledgers/set-opening-balance", data, "Opening Balance Set Successfully", $("#refBTN"))
            }
        }
    </script>
    <script>
        function deleteReference(id) {
            $(`#setRefTbody tr[data-rowid="${id}"]`).remove()
            calculateNetBalance()
        }
    </script>

    <script>
        $("#entityType").on("change", function () {
            
            $("#gstNumber").val("")
            $("#aliasName").val("").prop("disabled", false)
            $("#ledgerName").val("").prop("disabled", true)
            $("#PAN").val("").prop("disabled", true)
            $("#address").val("").prop("disabled", false)
            $("#state").val(null).select2()
            if ($(this).val() == "registered") {
                $("#gstNumber").prop("disabled", false)
                $("#gstNumberLabel").addClass("required")
            } else if ($(this).val() == "unregistered") {
                $("#gstNumber").prop("disabled", true)
                $("#PAN").prop("disabled", false)
                $("#ledgerName").prop("disabled", false)
            } else if ($(this).val() == "exempted") {
                $("#gstNumber").prop("disabled", false)
                $("#gstNumberLabel").removeClass("required")
            } else if ($(this).val() == "rcr") {
                $("#gstNumber").prop("disabled", false)
                $("#gstNumberLabel").removeClass("required")
            }

        })
    </script>

    <script>
        $("#PAN").on("keydown", function () {
            if (event.key === "Tab" && !event.shiftKey) {
                if ($(this).val() == "") {
                    showError("Please Enter PAN Number")
                } else {
                    if ($(this).val().length !== 10) {
                        showError("Invalid PAN Number")
                    } else {
                        const regex = /[A-Z]{5}[0-9]{4}[A-Z]{1}/.test($(this).val())
                        if (!regex) {
                            showError("Invalid PAN Number")
                        } 
                    }
                }
            }
        })
    </script>

    <script>
        $("#gstNumber").on("keydown", function () {
            if (event.key === "Tab" && !event.shiftKey) {
                if ($(this).val() == "" && $("#entityType").val() == "registered") {
                    showError("Please Enter GST Number")
                } else {
                    if ($(this).val().length !== 15 && $(this).val() !== "") {
                        showError("Invalid GST Number")

                    } else if($(this).val() == "" && ( $("#entityType").val() == "exempted" || $("#entityType").val() == "rcr")){
                        $("#PAN").prop("disabled", false).focus()
                        $("#ledgerName").prop("disabled", false)
                    } else {
                          //disabling all inputs and select elements inside entity details and sundry debtors creditors
                          $("input").each(function () {
                                $(this).prop("disabled", true);
                            });
                            $("select").each(function () {
                                $(this).prop("disabled", true).select2()
                            });
                        fetchGetRequest(`/masters/get-gst-data?gstNumber=${$(this).val()}`, true).then((data) => {
                          
                            $("#state").find("option").each(function () {
                                if ($(this).text() == data.state) {
                                    $(this).prop("selected", true)
                                }
                            })

                            //enabling only required inputs and select elements
                            $("#group").prop("disabled", false).select2()
                            $("#sundrydebtorscreditors input").each(function () {
                                $(this).prop("disabled", false);
                            });
                            $("#sundrydebtorscreditors select").each(function () {
                                $(this).prop("disabled", false).select2()
                            });
                            $("#entityType").prop("disabled", false)
                            $("#aliasName").prop("disabled", false).val(data.name)
                            
                            $("#gstNumber").prop("disabled", true)
                            $("#state").prop("disabled", true).select2()

                            $("#ledgerName").val(data.name).prop("disabled", true)
                            $("#PAN").val(data.pan).prop("disabled", true)
                            $("#address").val(data.address)
                            setTimeout(function () {
                                $("#aliasName").focus()
                            }, 100)
                        })
                    }
                }
            }

        })
    </script>
    <script>
         function deleteLedgers(id) {
        Swal.fire({
            text: "Are you sure you want to delete this Ledger?",
            icon: "warning",
            showCancelButton: !0,
            buttonsStyling: !1,
            confirmButtonText: "Yes, delete!",
            cancelButtonText: "No, cancel",
            customClass: {
                confirmButton: "btn fw-bold btn-danger",
                cancelButton: "btn fw-bold btn-active-light-primary"
            }
        }).then(response => {
            if (response.isConfirmed) {
                // Send the form data to the server
                const data = new URLSearchParams();
                data.append("id", id);
                fetchPostRequest("/masters/ledgers/delete", data, "Ledger Deleted Successfully")
               
            }
        })

    }
    </script>

    <%} %>