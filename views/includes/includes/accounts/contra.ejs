<% if(pageName==="contra" ) {%>
    <script>
        $("#voucherDate").flatpickr({
            dateFormat: "d-m-Y",
            minDate: new Date(new Date().getTime() - 5 * 24 * 60 * 60 * 1000), // 5 days ago
            maxDate: new Date(new Date().getTime() + 1 * 24 * 60 * 60 * 1000), // 1 day in the future
        });
    </script>
    <script>
        // Function to initialize DataTable
        function initializeDataTable() {
            // Set date data order
            const tableRows = table.querySelectorAll('tbody tr');

            tableRows.forEach(row => {
                const dateRow = row.querySelectorAll('td');
                const realDate = moment(dateRow[3].innerHTML, "DD MMM YYYY, LT").format(); // select date from 4th column in table
                dateRow[3].setAttribute('data-order', realDate);
            });

            // Init datatable --- more info on datatables: https://datatables.net/manual/
            datatable = $(table).DataTable({
                "info": false,
                'order': [],
                'pageLength': 10,
                'scrollX': true, // Set the height of the scrollable area (adjust as needed)
                'fixedColumns': {
                    leftColumns: 2, // Number of columns to freeze on the left
                },
            });

            // Hook export buttons
            const documentTitle = 'Challan Report';
            var buttons = new $.fn.dataTable.Buttons(table, {
                buttons: [
                    {
                        extend: 'copyHtml5',
                        title: documentTitle
                    },
                    {
                        extend: 'excelHtml5',
                        title: documentTitle
                    },
                    {
                        extend: 'csvHtml5',
                        title: documentTitle
                    }
                ]
            }).container().appendTo($('#kt_datatable_example_buttons'));

            // Hook dropdown menu click event to datatable export buttons
            const exportButtons = document.querySelectorAll('#kt_datatable_example_export_menu [data-kt-export]');
            exportButtons.forEach(exportButton => {
                exportButton.addEventListener('click', e => {
                    e.preventDefault();

                    // Get clicked export value
                    const exportValue = e.target.getAttribute('data-kt-export');
                    const target = document.querySelector('.dt-buttons .buttons-' + exportValue);

                    // Trigger click event on hidden datatable export buttons
                    target.click();
                });
            });

            // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()
            const filterSearch = document.querySelector('[data-kt-filter="search"]');
            filterSearch.addEventListener('keyup', function (e) {
                datatable.search(e.target.value).draw();
            });
        }

        // Initialize DataTable on document ready
        KTUtil.onDOMContentLoaded(function () {
            table = document.querySelector('#kt_datatable_example');
            if (table) {
                initializeDataTable();
            }
        });
    </script>

    <script>
        //disabling all inputs and select inside dr div
        $("#dr input").prop("disabled", true)
        $("#dr select").prop("disabled", true)
    </script>

    <script>
        function addNewContra() {
            $("#contraForm").trigger("reset")
            $("#crTable").empty()
            $("#drTable").empty()
            $("#title").text("Add New Contra Entry")
            $("#contraSubmit").css("display", "block")
            $("#contraUpdate, #tableCR, #tableDR").css("display", "none")

            const today = new Date();
            const day = today.getDate().toString().padStart(2, '0');
            const month = (today.getMonth() + 1).toString().padStart(2, '0');
            const year = today.getFullYear();

            const formattedDate = `${day}-${month}-${year}`;
            $("#recieptDate").val(formattedDate);
            $("#recieptSubmit").css("display", "block")
            $("#recieptUpdate").css("display", "none")
            $("#ledgerCR").prop("disabled", false).select2()
            $("#ledgerDR").prop("disabled", false).select2()
            $("#amountCr").prop("disabled", true)
            $("#chNumberCr").prop("disabled", true)
            $("#amountDr").prop("disabled", true)
            $("#chNumberDr").prop("disabled", true)
            //adding back all dr ledgers to the select2


            setTimeout(function () {
                $("#voucherNumber").prop("disabled", false).focus()
            }, 200)
        }
    </script>

    <script>
        $("#ledgerCR").on("change", function (e) {
            const crLength = $("#crTable tr").length
            if (crLength >= 1 && $("#ledgerCR").val() == "null") {
                $("#amountCr").prop("disabled", false).val(0)
                $("#chNumberCr").prop("disabled", false).val("0")
                $("#ledgerCR").prop("disabled", false).val("").select2()
                $("#amountDr").prop("disabled", false).val(0)
                $("#chNumberDr").prop("disabled", false).val("0")
                $("#ledgerDR").prop("disabled", false).val("").select2()
            } else if($("#ledgerCR").val() == "null" && crLength < 1) {
                showError("Please Select a Valid Ledger")
            }

            if($("#ledgerCR").val() !== "null") {
                $("#amountCr").prop("disabled", false).val(0)
                $("#chNumberCr").prop("disabled", false).val("0")
                $("#ledgerDR").prop("disabled", true).val("").select2()
            }
        })

        $("#ledgerDR").on("change", function (e) {
            const drLength = $("#drTable tr").length
            if (drLength >= 1 && $("#ledgerDR").val() == "null") {
                $("#amountCr").prop("disabled", false).val(0)
                $("#chNumberCr").prop("disabled", false).val("0")
                $("#ledgerCR").prop("disabled", false).val("").select2()
                $("#amountDr").prop("disabled", false).val(0)
                $("#chNumberDr").prop("disabled", false).val("0")
                $("#ledgerDR").prop("disabled", false).val("").select2()
            } else if($("#ledgerCR").val() == "null" && crLength < 1) {
                showError("Please Select a Valid Ledger")
            }

            if($("#ledgerDR").val() !== "null") {
                $("#amountCr").prop("disabled", true).val(0)
                $("#chNumberCr").prop("disabled", true).val("0")
                $("#ledgerCR").prop("disabled", true).val("").select2()
                $("#amountDr").prop("disabled", false).val(0)
                setTimeout(function () {
                    $("#chNumberDr").prop("disabled", false).val(0).focus()
                }, 200)
            }
        })



        $("#amountCr").on("keydown", function (e) {
            if (e.keyCode === 9 && !e.shiftKey) {
                if($(this).val() < 1) {
                    showError("Please Enter a Valid Amount")
                    return
                } else {
                    addNewRow(false, true)
                }
            }
        })

        $("#amountDr").on("keydown", function (e) {
            if (e.keyCode === 9 && !e.shiftKey) {
                if($(this).val() < 1) {
                    showError("Please Enter a Valid Amount")
                    return
                } else {
                    addNewRow(true, false)
                }
               
            }
        })

    </script>

    <script>
        function addNewRow(dr, cr) {
            let length = 0
            let ledgerElement = null
            let amountElement = null
            let text = null
            let table = null
            let chNumber = null
            let drVal = false
            let crVal = false
            if (dr) {
                ledgerElement = $("#ledgerDR option:selected")
                length = $("#drTable tr").length
                table = $("#drTable")
                amountElement = $("#amountDr")
                chNumber = $("#chNumberDr")
                drVal = true
                text = "DR"
            } else {
                ledgerElement = $("#ledgerCR option:selected")
                length = $("#crTable tr").length
                table = $("#crTable")
                amountElement = $("#amountCr")
                chNumber = $("#chNumberCr")
                crVal = true
                text = "CR"
            }
            if (ledgerElement.val() === "" || amountElement.val() === "") {
                showError("Please Select a Valid Ledger")
                return
            }

            if (amountElement.val() === 0) {
                showError("Please Enter a Valid Amount")
                return
            }
            const newRow = `<tr data-rowid=${length + 1}>
                <td>
                   ${length + 1}
                </td>
                <td>
                    <select class="form-select form-select-solid" disabled name="ledger${text}">
                        <option value="${ledgerElement.val()}" selected>${ledgerElement.text()}</option>
                    </select>
                </td>
                <td>
                    <input type="text" disabled class="form-control form-control-solid form-control-lg" value="${chNumber.val()}" name="chNumber${text}" required>
                </td>
                <td>
                    <input type="text" disabled class="form-control form-control-solid form-control-lg" value="${amountElement.val()}" name="amount${text}" required>
                </td>
                <td>
                    <button type="button" onclick="edit('${drVal}', '${crVal}', '${ledgerElement.val()}', '${ledgerElement.text()}' ,   '${chNumber.val()}', '${amountElement.val()}', '${length + 1}')" class="btn btn-sm btn-icon btn-primary btn-active-light-primary">
                                                        <i class="ki-duotone ki-pencil fs-2">
                                                         <span class="path1"></span>
                                                         <span class="path2"></span>
                                                        </i>
                        </button>

                        <button type="button" onclick="deleteOK('${drVal}', '${crVal}', '${length + 1}', '${ledgerElement.val()}', '${ledgerElement.text()}')" class="btn btn-sm btn-icon btn-danger btn-active-light-danger">
                            <i class="ki-duotone ki-trash-square fs-2">
                             <span class="path1"></span>
                             <span class="path2"></span>
                             <span class="path3"></span>
                             <span class="path4"></span>
                            </i>
                        </button>
                </td>
        }
            </tr>`
            table.append(newRow)

            if (dr) {
                $("#ledgerDR option:selected").remove()
                $("#ledgerDR").val("").select2()
                $("#amountDr").val(0)
                $("#chNumberDr").val("0")
                $("#tableDR").css("display", "block")
                $("#ledgerCR").prop("disabled", false).val("").select2()
              
         
            } else {
                $("#ledgerCR option:selected").remove()
                $("#ledgerCR").val("").select2()
                $("#amountCr").val(0)
                $("#chNumberCr").val("0")
                $("#tableCR").css("display", "block")
                $("#ledgerDR").select2('close').prop("disabled", false).val("").select2()
            }
            $("#amountCr").prop("disabled", true).val(0)
                $("#chNumberCr").prop("disabled", true).val("0")
            $("#amountDr").prop("disabled", true).val(0)
                $("#chNumberDr").prop("disabled", true).val("0")

        }
    </script>
    <script>
        function deleteOK(dr, cr, id, ledger, ledgerText) {
            if (dr === "true") {
                const data = $("#ledgerDR").find(`option[value=${ledger}]`).val()
                if(!data) {
                    const newOption = `<option value="${ledger}" selected>${ledgerText}</option>`
                    $("#ledgerDR").append(newOption).val("").select2()
                }
                $("#drTable").find(`tr[data-rowid=${id}]`).remove()
            } else {
                const data = $("#ledgerCR").find(`option[value=${ledger}]`).val()
                if(!data) {
                    const newOption = `<option value="${ledger}" selected>${ledgerText}</option>`
                    $("#ledgerCR").append(newOption).val("").select2()
                }
                $("#crTable").find(`tr[data-rowid=${id}]`).remove()
            }
            reCalculateSerial()
        }
    </script>

    <script>
        function edit(dr, cr, ledger, ledgerText, chNumber, amount, id) {
            if (dr == "true") {
                const newOption = `<option value="${ledger}" selected>${ledgerText}</option>`
                $("#ledgerDR").append(newOption)
                $("#ledgerDR").prop("disabled", false).val(ledger).select2()
                $("#amountDr").val(amount).prop("disabled", false)
                $("#tableDR").css("display", "none")
                $("#drTable").find(`tr[data-rowid=${id}]`).remove()
                $("#amountDr").focus()
                setTimeout(function () {
                    $("#chNumberDr").prop("disabled", false).val(chNumber).focus()
                }, 200)
            } else {
                const newOption = `<option value="${ledger}" selected>${ledgerText}</option>`
                $("#ledgerCR").append(newOption)
                $("#ledgerCR").prop("disabled", false).val(ledger).select2()
                $("#amountCr").val(amount).prop("disabled", false)
                $("#tableCR").css("display", "none")
                $("#crTable").find(`tr[data-rowid=${id}]`).remove()
                setTimeout(function () {
                    $("#chNumberCr").prop("disabled", false).val(chNumber).focus()
                }, 200)
            }
            reCalculateSerial()
        }
    </script>
    <script>
        function reCalculateSerial() {
            const CRtable = $("#crPartyTable tr")
            for (let i = 0; i < table.length; i++) {
                table[i].querySelector("td:first-child input").value = i + 1
            }

            const DRtable = $("#drPartyTable tr")
            for (let i = 0; i < table.length; i++) {
                table[i].querySelector("td:first-child input").value = i + 1
            }
        }
    </script>
    <script>
        function createContra() {
            const trTable = $("#crTable tr")
            const drTable = $("#drTable tr")

            let crTotal = 0
            let drTotal = 0

            for (let i = 0; i < trTable.length; i++) {
                crTotal += parseInt(trTable[i].querySelector("td:nth-child(4) input").value)
            }
            for (let i = 0; i < drTable.length; i++) {
                drTotal += parseInt(drTable[i].querySelector("td:nth-child(4) input").value)
            }

            if (crTotal !== drTotal) {
                showError("Total Debit and Credit Amount Must be Equal")
                return
            }

            $("#contraSubmit").attr("data-kt-indicator", "on").prop("disabled", true);
            $("#modalCloseBTN").prop("disabled", true);
            const form = document.getElementById("contraForm");

            // Enable disabled inputs and selects
            const disabledInputs = form.querySelectorAll("input[disabled], select[disabled]");
            for (const input of disabledInputs) {
                input.removeAttribute("disabled");
            }

            // Serialize the form data
            const formData = new FormData(form);

            // Re-disable previously disabled inputs and selects
            for (const input of disabledInputs) {
                input.setAttribute("disabled", "disabled");
            }

            // Create a URLSearchParams object and add form data to it
            const data = new URLSearchParams();
            for (const pair of formData) {
                data.append(pair[0], pair[1]);
            }

            fetch("/accounts/contra/new", {
                method: "POST",
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: data
            }).then((data) => {
                if (data.status === 400) {

                    return data.json().then((message) => {
                        Swal.fire({
                            text: message.message,
                            icon: "error",
                            buttonsStyling: !1,
                            confirmButtonText: "Ok, got it!",
                            customClass: {
                                confirmButton: "btn btn-primary"
                            }
                        }).then((response) => {
                            if (response.isConfirmed) {
                                $("#newLedgerBTN").attr("data-kt-indicator", "off")
                                $("#newLedgerBTN").attr("disabled", false)
                            }
                        })
                    })

                } else if (data.status === 200) {
                    Swal.fire({
                        text: "Contra Voucher Created",
                        icon: "success",
                        buttonsStyling: !1,
                        confirmButtonText: "Ok, got it!",
                        customClass: {
                            confirmButton: "btn btn-primary"
                        }
                    }).then((response) => {
                        if (response.isConfirmed) {
                            location.reload()
                        }
                    })
                } else if (data.status === 401) {
                    Swal.fire({
                        text: "You are not authorized to perform this action",
                        icon: "error",
                        buttonsStyling: !1,
                        confirmButtonText: "Ok, got it!",
                        customClass: {
                            confirmButton: "btn btn-primary"
                        }
                    }).then((data) => {
                        if (data.isConfirmed) {
                            $("#newLedgerBTN").attr("data-kt-indicator", "off")
                            $("#newLedgerBTN").attr("disabled", false)

                        }
                    })
                }
            })

        }
    </script>
    <script>
        function addNewEditRow(dr, cr, newLength, ledgerID, ledgerText, chNumber, amount) {
            let length = newLength + 1
            let table = null
            let drVal = false
            let crVal = false
            let text = null
            if (dr) {
                table = $("#drTable")
                drVal = true
                text = "DR"
            } else {
                table = $("#crTable")
                crVal = true
                text = "CR"
            }
            const newRow = `<tr data-rowid=${length}>
                <td>
                   ${length}
                </td>
                <td>
                    <select class="form-select form-select-solid" disabled name="ledger${text}">
                        <option value="${ledgerID}" selected>${ledgerText}</option>
                    </select>
                </td>
                <td>
                    <input type="text" disabled class="form-control form-control-solid form-control-lg" value="${chNumber}" name="chNumber${text}" required>
                </td>
                <td>
                    <input type="text" disabled class="form-control form-control-solid form-control-lg" value="${amount}" name="amount${text}" required>
                </td>
                <td>
                    <button type="button" onclick="edit('${drVal}', '${crVal}', '${ledgerID}', '${ledgerText}' , '${chNumber}', '${amount}', '${length}')" class="btn btn-sm btn-icon btn-primary btn-active-light-primary">
                                                        <i class="ki-duotone ki-pencil fs-2">
                                                         <span class="path1"></span>
                                                         <span class="path2"></span>
                                                        </i>
                        </button>

                        <button type="button" onclick="deleteOK('${drVal}', '${crVal}', '${length}', '${ledgerID}', '${ledgerText}')" class="btn btn-sm btn-icon btn-danger btn-active-light-danger">
                            <i class="ki-duotone ki-trash-square fs-2">
                             <span class="path1"></span>
                             <span class="path2"></span>
                             <span class="path3"></span>
                             <span class="path4"></span>
                            </i>
                        </button>
                </td>
        }
            </tr>`
            table.append(newRow)
        }
    </script>

    <script>
        function editContra(id) {
            fetch(`/accounts/contra/edit?id=${id}`, {
                method : "GET"
            }).then((res)=> {
                if(res.status === 200) {
                    return res.json().then((data)=> {
                        $("#contraForm").trigger("reset")
                        $("#editID").val(data._id)
                        $("#crTable").empty()
                        $("#drTable").empty()
                        $("#title").text("Edit Contra Entry")
                        $("#contraSubmit").css("display", "none")
                        $("#contraUpdate").css("display", "block")

                        $("#voucherNumber").val(data.voucherNumber).prop("disabled", true)
                        $("#voucherDate").val(data.date)

                        //adding rows in cr table
                        for(let i = 0; i < data.crEntry.length; i++) {
                                addNewEditRow(false, true, i, data.crEntry[i].ledger._id, data.crEntry[i].ledger.name, data.crEntry[i].chNumber, data.crEntry[i].amount)
                        }
                        //adding rows in dr table
                        for(let i = 0; i < data.drEntry.length; i++) {
                                addNewEditRow(true, false, i, data.drEntry[i].ledger._id, data.drEntry[i].ledger.name, data.drEntry[i].chNumber, data.drEntry[i].amount)
                        }
                        $("#ledgerDR").prop("disabled", false).select2()
                        $("#ledgerCR").prop("disabled", false).select2()
                        $("#amountCr").prop("disabled", true)
                        $("#chNumberCr").prop("disabled", true)
                        $("#amountDr").prop("disabled", true)
                        $("#chNumberDr").prop("disabled", true)


                        $("#kt_modal_2").modal("show")


                    })
                }
            })
        }
    </script>


<script>
    function updateContra() {
             const trTable = $("#crTable tr")
            const drTable = $("#drTable tr")

            let crTotal = 0
            let drTotal = 0

            for (let i = 0; i < trTable.length; i++) {
                crTotal += parseInt(trTable[i].querySelector("td:nth-child(4) input").value)
            }
            for (let i = 0; i < drTable.length; i++) {
                drTotal += parseInt(drTable[i].querySelector("td:nth-child(4) input").value)
            }

            if (crTotal !== drTotal) {
                showError("Total Debit and Credit Amount Must be Equal")
                return
            }

            $("#contraUpdate").attr("data-kt-indicator", "on").prop("disabled", true);
            $("#modalCloseBTN").prop("disabled", true);
            const form = document.getElementById("contraForm");

            // Enable disabled inputs and selects
            const disabledInputs = form.querySelectorAll("input[disabled], select[disabled]");
            for (const input of disabledInputs) {
                input.removeAttribute("disabled");
            }

            // Serialize the form data
            const formData = new FormData(form);

            // Re-disable previously disabled inputs and selects
            for (const input of disabledInputs) {
                input.setAttribute("disabled", "disabled");
            }

            // Create a URLSearchParams object and add form data to it
            const data = new URLSearchParams();
            for (const pair of formData) {
                data.append(pair[0], pair[1]);
            }

            fetch("/accounts/contra/edit", {
                method: "POST",
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: data
            }).then((data) => {
                if (data.status === 400) {

                    return data.json().then((message) => {
                        Swal.fire({
                            text: message.message,
                            icon: "error",
                            buttonsStyling: !1,
                            confirmButtonText: "Ok, got it!",
                            customClass: {
                                confirmButton: "btn btn-primary"
                            }
                        }).then((response) => {
                            if (response.isConfirmed) {
                                $("#newLedgerBTN").attr("data-kt-indicator", "off")
                                $("#newLedgerBTN").attr("disabled", false)
                            }
                        })
                    })

                } else if (data.status === 200) {
                    Swal.fire({
                        text: "Contra Voucher Updated",
                        icon: "success",
                        buttonsStyling: !1,
                        confirmButtonText: "Ok, got it!",
                        customClass: {
                            confirmButton: "btn btn-primary"
                        }
                    }).then((response) => {
                        if (response.isConfirmed) {
                            location.reload()
                        }
                    })
                } else if (data.status === 401) {
                    Swal.fire({
                        text: "You are not authorized to perform this action",
                        icon: "error",
                        buttonsStyling: !1,
                        confirmButtonText: "Ok, got it!",
                        customClass: {
                            confirmButton: "btn btn-primary"
                        }
                    }).then((data) => {
                        if (data.isConfirmed) {
                            $("#newLedgerBTN").attr("data-kt-indicator", "off")
                            $("#newLedgerBTN").attr("disabled", false)

                        }
                    })
                }
            })

    }
</script>
<script>
    function deleteContra(id) {
        Swal.fire({
            text: "Are you sure you want to delete this Contra Voucher?",
            icon: "warning",
            showCancelButton: !0,
            buttonsStyling: !1,
            confirmButtonText: "Yes, delete it!",
            cancelButtonText: "No, cancel",
            customClass: {
                confirmButton: "btn btn-danger",
                cancelButton: "btn btn-active-light-primary"
            }
        }).then((result) => {
            if (result.value) {
                fetch(`/accounts/contra/delete?id=${id}`, {
                    method: "GET"
                }).then((data) => {
                    if (data.status === 200) {
                        Swal.fire({
                            text: "Contra Voucher Deleted",
                            icon: "success",
                            buttonsStyling: !1,
                            confirmButtonText: "Ok, got it!",
                            customClass: {
                                confirmButton: "btn btn-primary"
                            }
                        }).then((response) => {
                            if (response.isConfirmed) {
                                location.reload()
                            }
                        })
                    } else if (data.status === 401) {
                        Swal.fire({
                            text: "You are not authorized to perform this action",
                            icon: "error",
                            buttonsStyling: !1,
                            confirmButtonText: "Ok, got it!",
                            customClass: {
                                confirmButton: "btn btn-primary"
                            }
                        }).then((data) => {
                            if (data.isConfirmed) {
                                $("#newLedgerBTN").attr("data-kt-indicator", "off")
                                $("#newLedgerBTN").attr("disabled", false)
                            }
                        })
                    }
                })
            }
        })
    }
</script>

    <%} %>