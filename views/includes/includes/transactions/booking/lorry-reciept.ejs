<% if(pageName==="lrOK" ) {%>
    <script>
        var start = moment().subtract(29, "days");
        var end = moment();

        function cb(start, end) {
            $("#searchRange").html(start.format("D, M, Y") + " - " + end.format("D, M, Y"));
        }

        $("#searchRange").daterangepicker({
            startDate: start,
            endDate: end,
            ranges: {
                "Today": [moment(), moment()],
                "Yesterday": [moment().subtract(1, "days"), moment().subtract(1, "days")],
                "Last 7 Days": [moment().subtract(6, "days"), moment()],
                "Last 30 Days": [moment().subtract(29, "days"), moment()],
                "This Month": [moment().startOf("month"), moment().endOf("month")],
                "Last Month": [moment().subtract(1, "month").startOf("month"), moment().subtract(1, "month").endOf("month")]
            },
            locale: {
                format: "D-M-Y"
            }
        }, cb);

        cb(start, end);

        if (storedDateRange) {
            // If a stored date range is found, parse it and set it as the default value
            const parsedDateRange = JSON.parse(storedDateRange);
            $("#searchRange").val(parsedDateRange.join(' to '))
        }
    </script>
    <script>
        // Function to initialize DataTable
        function initializeDataTable() {
            // Set date data order
            const tableRows = table.querySelectorAll('tbody tr');

            tableRows.forEach(row => {
                const dateRow = row.querySelectorAll('td');
                const realDate = moment(dateRow[3].innerHTML, "DD MMM YYYY, LT").format(); // select date from 4th column in table
                dateRow[3].setAttribute('data-order', realDate);
            });

            // Init datatable --- more info on datatables: https://datatables.net/manual/
            datatable = $(table).DataTable({
                "info": true,
                'order': [],
                'pageLength': 10,
                'scrollX': true, // Set the height of the scrollable area (adjust as needed)
                'fixedColumns': {
                    leftColumns: 2, // Number of columns to freeze on the left
                },
            });

            // Hook export buttons
            const documentTitle = 'Lorry Reciept (LR) Report';
            var buttons = new $.fn.dataTable.Buttons(table, {
                buttons: [
                    {
                        extend: 'copyHtml5',
                        title: documentTitle
                    },
                    {
                        extend: 'excelHtml5',
                        title: documentTitle
                    },
                    {
                        extend: 'csvHtml5',
                        title: documentTitle
                    }
                ]
            }).container().appendTo($('#kt_datatable_example_buttons'));

            // Hook dropdown menu click event to datatable export buttons
            const exportButtons = document.querySelectorAll('#kt_datatable_example_export_menu [data-kt-export]');
            exportButtons.forEach(exportButton => {
                exportButton.addEventListener('click', e => {
                    e.preventDefault();

                    // Get clicked export value
                    const exportValue = e.target.getAttribute('data-kt-export');
                    const target = document.querySelector('.dt-buttons .buttons-' + exportValue);

                    // Trigger click event on hidden datatable export buttons
                    target.click();
                });
            });

            // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()
            const filterSearch = document.querySelector('[data-kt-filter="search"]');
            filterSearch.addEventListener('keyup', function (e) {
                datatable.search(e.target.value).draw();
            });
        }

        // Initialize DataTable on document ready
        KTUtil.onDOMContentLoaded(function () {
            table = document.querySelector('#kt_datatable_example');
            if (table) {
                initializeDataTable();
            }
        });
    </script>



    <script>
        function findLR() {

            const selectBranchElement = $("#branch")
            const dateRange = $("#searchRange")
            const form = $("#findLRForm")
            if (selectBranchElement.val() === "") {
                showError("Please Select Branch")
            } else if (dateRange.val() === "") {
                showError("Please Select Date")
            } else {

                const form = document.getElementById("findLRForm");



                // Serialize the form data
                const formData = new FormData(form);



                // Create a URLSearchParams object and add form data to it
                const data = new URLSearchParams();
                for (const pair of formData) {
                    data.append(pair[0], pair[1]);
                }

                // Send the form data to the server
                // Declare the table variable
                const table = $('#kt_datatable_example').DataTable();

                // Destroy the existing DataTable instance (if any)
                table.buttons('.export').remove();
                table.destroy();
                fetchPostRequestAndReturnData("/transactions/booking/lorry-reciepts/data", data).then((newData)=> {
                            const tbody = $("#lrDATA")
                            tbody.empty()
                            newData.forEach(data => {

                                const newRow = `
                                    <tr class="odd">
                                                <td>
                                                    <button onclick="viewLR('${data._id}')" class="btn btn-sm btn-icon btn-primary btn-active-light-primary">
                                                        <i class="ki-duotone ki-eye fs-2">
                                                         <span class="path1"></span>
                                                         <span class="path2"></span>
                                                         <span class="path3"></span>
                                                        </i>
                                                    </button>
                                                    
                                                    <button onclick="editLR('${data._id}')" class="btn btn-sm btn-icon btn-primary btn-active-light-primary">
                                                        <i class="ki-duotone ki-pencil fs-2">
                                                         <span class="path1"></span>
                                                         <span class="path2"></span>
                                                        </i>
                                                    </button>
                                                    <button class="btn btn-sm btn-icon btn-info btn-active-light-success">
                                                        <i class="ki-duotone ki-arrow-down fs-2">
                                                         <span class="path1"></span>
                                                         <span class="path2"></span>
                                                        </i>
                                                    </button>
                                                    <button class="btn btn-sm btn-icon btn-info btn-active-light-success">
                                                        <i class="ki-duotone ki-printer fs-2">
                                                         <span class="path1"></span>
                                                         <span class="path2"></span>
                                                         <span class="path3"></span>
                                                         <span class="path4"></span>
                                                         <span class="path5"></span>
                                                        </i>
                                                    </button>
                                                   
                                                    <button onclick="deleteLR('${data._id}')" class="btn btn-sm btn-icon btn-danger btn-active-light-danger">
                                                        <i class="ki-duotone ki-trash-square fs-2">
                                                         <span class="path1"></span>
                                                         <span class="path2"></span>
                                                         <span class="path3"></span>
                                                         <span class="path4"></span>
                                                        </i>
                                                    </button>
                                                    
                                                    </td>
                                                <td>
                                                    ${data.lrNumber}
                                                </td>
                                                
                                                <td>
                                                    ${data.date}
                                                </td>
                                                <td>${data.from.cityName}</td>
                                                <td>${data.to.cityName}</td>
                                                <td>${data.consignorName}</td>
                                                <td>${data.consigneeName}</td>
                                                <td>${data.invoiceNumber}</td>
                                                <td>${data.total.actualWeight}</td>
                                                <td>${data.total.chargedWeight}</td>
                                                <td>${data.total.qty}</td>
                                                <td>${data.billedAt.name}</td>
                                                <td></td>
                                            </tr>
                                    `

                                tbody.append(newRow)
                            })

                            initializeDataTable()
                })
            }

        }
    </script>
    <script>
        function showError(message) {
            Swal.fire({
                text: message,
                icon: "error",
                buttonsStyling: !1,
                confirmButtonText: "Ok, got it!",
                customClass: {
                    confirmButton: "btn btn-primary"
                }
            })
        }
    </script>


    <script>


        function transactionDate(id) {
            const dateInput = id

            const flatpickrInstance = flatpickr(dateInput, {
                dateFormat: "d-m-Y",
                minDate: new Date(new Date().getTime() - 5 * 24 * 60 * 60 * 1000), // 5 days ago
                maxDate: new Date(new Date().getTime() + 1 * 24 * 60 * 60 * 1000), // 1 day in the future
                defaultDate: "today",
                allowInput: true, // Set today's date as the default
                onReady: function (selectedDates, dateStr, instance) {
                    // When the calendar is ready, apply the input mask
                    const inputMask = new Inputmask("99-99-9999", { insertMode: false });
                    inputMask.mask(dateInput);
                },
            });

            let userInput = ""; // Store the user's input

            dateInput.addEventListener("focus", function () {
                // Automatically select "dd" part when the input receives focus
                dateInput.setSelectionRange(0, 2);
            });
            dateInput.addEventListener("input", function () {
                // Get the current cursor position
                const cursorPosition = dateInput.selectionStart;

                // Check if the input matches the expected date format
                const regex = /^(\d{0,2}-\d{0,2}-\d{0,4}).*$/;
                const match = dateInput.value.match(regex);

                if (match) {
                    const parts = match[1].split("-");

                    // Validate and format day section
                    let day = parts[0];
                    if (day.length > 0) {
                        day = day.padStart(2, "0");
                    }

                    // Validate and format month section
                    let month = parts[1];
                    if (month.length > 0) {
                        month = month.padStart(2, "0");
                    }

                    // Validate and format year section
                    let year = parts[2] || "";
                    if (year.length === 2) {
                        const currentYear = new Date().getFullYear();
                        const currentCentury = Math.floor(currentYear / 100) * 100;
                        year = (currentCentury + parseInt(year)).toString();
                    }

                    userInput = `${day}-${month}-${year}`;
                    flatpickrInstance.setDate(userInput, true, "d-m-Y");

                    // Restore the cursor position
                    dateInput.setSelectionRange(cursorPosition, cursorPosition);
                }
            });

        }



        function expiryDate(id) {

            const dateInput = id

            const flatpickrInstance = flatpickr(dateInput, {
                dateFormat: "d-m-Y",
                minDate: "today",
                defaultDate: "today",
                allowInput: true, // Set today's date as the default
                onReady: function (selectedDates, dateStr, instance) {
                    // When the calendar is ready, apply the input mask
                    const inputMask = new Inputmask("99-99-9999", { insertMode: false });
                    inputMask.mask(dateInput);
                },
            });

            let userInput = ""; // Store the user's input

            dateInput.addEventListener("focus", function () {
                // Automatically select "dd" part when the input receives focus
                dateInput.setSelectionRange(0, 2);
            });

            dateInput.addEventListener("input", function () {
                // Check if the input matches the expected date format
                const regex = /^(\d{0,2}-\d{0,2}-\d{0,4}).*$/;
                const match = dateInput.value.match(regex);

                if (match) {
                    const parts = match[1].split("-");

                    // Validate and format day section
                    let day = parts[0];
                    if (day.length > 0) {
                        day = day.padStart(2, "0");
                    }

                    // Validate and format month section
                    let month = parts[1];
                    if (month.length > 0) {
                        month = month.padStart(2, "0");
                    }

                    // Validate and format year section
                    let year = parts[2] || "";
                    if (year.length === 2) {
                        const currentYear = new Date().getFullYear();
                        const currentCentury = Math.floor(currentYear / 100) * 100;
                        year = (currentCentury + parseInt(year)).toString();
                    }

                    userInput = `${day}-${month}-${year}`;
                    flatpickrInstance.setDate(userInput, true, "d-m-Y");
                }
            });
        }

    </script>

    <script>
        const lrDATE = document.getElementById("lr_date")
        transactionDate(lrDATE)
        const expiryDATE = document.getElementById("expiry")
        expiryDate(expiryDATE)
    </script>

    <script>
        //enabling or disabling delivery charges input based on delibery mode
        $("#deliveryBy").on("change", function () {
            if ($("#deliveryBy").val() === "DOOR") {
                $("#deliveryCharges").prop("disabled", false)
            } else {
                $("#deliveryCharges").val("0")
                $("#deliveryCharges").prop("disabled", true)
            }
        })
    </script>
    <!--Consignor & Consignee-->
    <!--Managing Load Type-->
    <script>
        const selectLoadType = $("#selectLoadType");

        selectLoadType.select2();

        selectLoadType.on("change", function () {
            const selectedValue = selectLoadType.val();

            if (selectedValue === "FTL") {
                // Enable the "selectVehicle" dropdown
                $("#selectVehicle").prop("disabled", false);
            } else {
                // Disable the "selectVehicle" dropdown for other options
                $("#selectVehicle")
                    .prop("disabled", true)
                    .val(null) // Clear the selection
                    .trigger("change"); // Trigger the change event to notify Select2 of the change
            }
        });

    </script>



    <script>

        function getConsignorConsignee(clientID) {
            return fetch("/getConsignorConsignee?clientID=" + clientID, {
                method: "GET"
            }).then(response => {
                if (response.status === 200) {
                    return response.json()
                }
            })
        }

        // Initialize Select2 for Consignor Dropdown
        var selectConsignorDropdown = $("#selectConsignor");
        selectConsignorDropdown.select2();

        // Event listener for Consignor Dropdown change
        selectConsignorDropdown.on('change', async function () {
            const data = await getConsignorConsignee(selectConsignorDropdown.val());

            $("#consignorGST").val(data.gst);
        });

        // Initialize Select2 for Consignee Dropdown
        var selectConsigneeDropdown = $("#selectConsignee");
        selectConsigneeDropdown.select2();

        // Event listener for Consignee Dropdown change
        selectConsigneeDropdown.on('change', async function () {
            const data = await getConsignorConsignee(selectConsigneeDropdown.val());
            $("#deliveryAddress").val(data.address)
            $("#consigneeGST").val(data.gst);
        });


    </script>


    <script>
        const selectBilledTo = $("#selectBilledTo")
        const selectConsignee = $("#selectConsignee")
        const selectConsignor = $("#selectConsignor")
        const selectGstPaidBy = $("#selectGstPaidBy");
        selectBilledTo.select2();

        selectBilledTo.on("change", function () {
            if (!selectConsignee.val() || !selectConsignor.val()) {
                // Show a SweetAlert if neither consignee nor consignor is selected
                Swal.fire({
                    text: "Please Select Consignor & Consignee.",
                    icon: "error",
                    buttonsStyling: !1,
                    confirmButtonText: "Ok, got it!",
                    customClass: {
                        confirmButton: "btn btn-primary"
                    }
                }).then((response) => {
                    if (response.isConfirmed) {
                        selectBilledTo.val(null).trigger("change.select2");
                    }
                });
                selectGstPaidBy.val("").trigger("change.select2"); // Reset selectGstPaidBy
            } else if (selectConsignee.val() === selectBilledTo.val()) {
                // Set the selected value for selectGstPaidBy to "consignee"
                selectGstPaidBy.val("consignee").trigger("change.select2");
            } else if (selectConsignor.val() === selectBilledTo.val()) {
                // Set the selected value for selectGstPaidBy to "consignor"
                selectGstPaidBy.val("consignor").trigger("change.select2");
            } else {
                selectGstPaidBy.val("TPT").trigger("change.select2");
            }
        });
    </script>



    <script>
        function addRow(data) {

            const materialData = data.material
            for (i = 0; i < materialData.length; i++) {

                const itemTableBody = document.getElementById("itemTableBody");
                const newRow = document.createElement("tr");

                newRow.className = "border-bottom border-bottom-dashed"
                newRow.setAttribute("data-kt-elements", "item")
                newRow.setAttribute("data-rowid", i)
                newRow.innerHTML = ` 
                                 <tr class="border-bottom border-bottom-dashed" data-kt-element="item" data-rowid="${i}">
                                                <td class="pe-7">
                                                    <input type="hidden" name="materialID" value="${materialData[i]._id}">
                                                    <input oninput="validateWholeNumber(this)" value="${materialData[i].qty}" type="text" class="NOP form-control form-control-solid mb-2"
                                                        name="numberOfPackages" id="numberOfPackages${i}" placeholder="QTY">

                                                   
                                                </td>

                                                <td class="ps-0">
                                                    <select name="MOP" id="selectPackaging${i}" class="MOP form-select form-select-solid"data-placeholder="Packaging" data-control="select2">
                                                        <option></option>
                                                        <% mopData.forEach((data)=> {%> 
                                                            <option value="<%=data.id%>"><%=data.methodOfPackaging%></option>
                                                        <%}) %>
                                                    
                                                    </select>
                                                </td>

                                                <td class="ps-0">
                                                    <select name="goodsDescription" id="selectGoodsDescription${i}" class="goodsDescription form-select form-select-solid"data-placeholder="Goods Type" data-control="select2">
                                                        <option></option>
                                                        <% goodsDescriptionData.forEach((data)=> {%> 
                                                            <option value="<%=data.id%>"><%=data.goodsDescription%></option>
                                                        <%}) %>
                                                    
                                                    </select>
                                                </td>

                                                <td class="ps-0">
                                                    <input disabled oninput="validateWholeNumber(this)" value="${materialData[i].actualWeight}" class="actual-weight form-control form-control-solid" type="text" name="actualWeight" id="actualWeight${i}" placeholder="Actual Weight">
                                                </td>
                                                <td class="ps-0">
                                                    <input disabled oninput="validateWholeNumber(this)" value="${materialData[i].chargedWeight}" class="charged-weight form-control form-control-solid" type="text" name="chargedWeight" id="chargedWeight${i}" placeholder="Charged Weight">
                                                </td>
                                                <td>
                                                    <select disabled name="rateON" id="rateON${i}"class="rateON form-select form-select-solid"data-placeholder="Rate On" data-control="select2">
                                                        
                                                                <option></option>
                                                            <option value="actualWeight">Actual Weight</option>
                                                            <option value="chargedWeight">Charged Weight</option>
                                                            <option value="PKG">Package</option>
                                                            <option value="FTL">FTL(Fix)</option>
                                                    
                                                    </select>
                                                </td>
                                                <td class="pt-5">
                                                    <input oninput="validateNumberWithDecimals(this)" value="${materialData[i].rate}" class="rate form-control form-control-solid" type="text" name="rate" id="rate${i}" placeholder="Rate">
                                                </td>
                                                <td class="pt-5"> <input disabled value="${materialData[i].amount}" class="amount form-control form-control-solid" type="text" name="amount" id="amount${i}" disabled placeholder="Amount"></td>
                                                <td class="pt-5 text-end">
                                                
                                                    <button onclick="deleteRow('${i}')" type="button" class="btn btn-sm btn-icon btn-danger btn-active-color-grey remove-item" data-kt-element="remove-item">
                                                        <i class="ki-duotone ki-trash-square fs-1"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span></i>
                                                      </button>
                                                  </td>
                                                  </tr>
                                                  `



                itemTableBody.appendChild(newRow);

                //Selecting packaging by defualt
                const selectPackagingNew = newRow.querySelector(`#selectPackaging${i}`)
                selectPackagingNew.options.forEach((data) => {
                    if (data.value === materialData[i].packaging) {
                        data.selected = true
                    }
                })

                //selecting goods content by default
                const goodsDescriptionNew = newRow.querySelector(`#selectGoodsDescription${i}`)
                goodsDescriptionNew.options.forEach((data) => {
                    if (data.value === materialData[i].goodsDescription) {
                        data.selected = true
                    }
                })


                if (typeof materialData[i].rateON == "string" && materialData.rateON != "null") {
                    const rateONNew = newRow.querySelector(`#rateON${i}`);
                    rateONNew.options.forEach(data => {
                        if (data.value === materialData[i].rateON) {
                            data.selected = true
                        }
                    })


                } else {
                         $(`#rateON${i}`).empty()
                         const newOption = `<option value="${materialData[i].rateON._id}">${materialData[i].rateON.rateON}</option>`
                         $(`#rateON${i}`).append(newOption)
                         $(`#rateON${i}`).prop("disabled", true).select2()


                }
               if(data.deliverySource != null) {
              
                $("#deliverySourceDiv").css("display", "block")
                var optionToSelect5 = $(`#selectDeliverySource option[value="${data.deliverySource}"]`);
                optionToSelect5.attr('selected', 'selected');
                $("#selectDeliverySource").select2()
                $("#deliverySource").prop("checked", true)
               }


                if(data.bookingSource != null) {
                    $("#bookingSourceDiv").css("display", "block")
                var optionToSelect5 = $(`#selectBookingSource option[value="${data.deliverySource}"]`);
                optionToSelect5.attr('selected', 'selected');
                $("#selectBookingSource").select2()
                $("#bookingSource").prop("checked", true)
                }

                

                $(`#selectGoodsDescription${i}`).select2()
                $(`#selectPackaging${i}`).select2()
                $(`#rateON${i}`).select2()
            }
            //calculating total amt
            const allAMTElement = $(".amount")
            const elementArray = [...allAMTElement];
            let basicFreight = 0
            elementArray.forEach(data => {
                basicFreight = parseFloat(basicFreight) + parseFloat(data.value)
            })
            $("#basicFreight").val(customRound(basicFreight))
            $("#basicFreight").trigger("input")
            // triggering change if GST TO BE PAID BY TRANSPORTER
            if (data.gstPaidBy === "transporter") {
                $("#selectGstPaidBy").trigger("change")
            } else {
                $(".total").trigger("change")
            }
            updateLREway(data.ewayBill)

        }
    </script>

    <script>

        $(document).on('change', '.rateON', function () {
            const rowId = $(this).closest('tr').attr('data-rowid');
            const rateONElement = $(`#rateON${rowId}`);
            const rateElement = $(`#rate${rowId}`);
            const amountElement = $(`#amount${rowId}`);
            const actualWeightElement = $(`#actualWeight${rowId}`)
            const chargedWeightElement = $(`#chargedWeight${rowId}`)
            const packageElement = $(`#numberOfPackages${rowId}`)

            if (rateONElement.val() === "actualWeight") {
                calculatedAmt = customRound(parseFloat(actualWeightElement.val())) * parseFloat(rateElement.val())
                amountElement.val(calculatedAmt)
            } else if (rateONElement.val() === "chargedWeight") {
                calculatedAmt = customRound(parseFloat(chargedWeightElement.val())) * parseFloat(rateElement.val())
                amountElement.val(calculatedAmt)
            } else if (rateONElement.val() === "packages") {
                calculatedAmt = parseInt(packageElement.val()) * parseFloat(rateElement.val())
                amountElement.val(customRound(calculatedAmt))
            }

            //calculating total amt
            const allAMTElement = $(".amount")
            const elementArray = [...allAMTElement];
            let basicFreight = 0
            elementArray.forEach(data => {
                basicFreight = parseFloat(basicFreight) + parseFloat(data.value)
            })
            $("#basicFreight").val(customRound(basicFreight))
            $("#basicFreight").trigger("input")


        })


        $(document).on('input', '.rate, .actual-weight, .charged-weight, .NOP', function () {

            const rowId = $(this).closest('tr').attr('data-rowid');
            const rateONElement = $(`#rateON${rowId}`);
            const rateElement = $(`#rate${rowId}`);
            const amountElement = $(`#amount${rowId}`);
            const actualWeightElement = $(`#actualWeight${rowId}`)
            const chargedWeightElement = $(`#chargedWeight${rowId}`)
            const packageElement = $(`#numberOfPackages${rowId}`)

            if (rateONElement.val() === "actualWeight") {
                calculatedAmt = customRound(parseFloat(actualWeightElement.val())) * parseFloat(rateElement.val())
                amountElement.val(calculatedAmt)
            } else if (rateONElement.val() === "chargedWeight") {
                calculatedAmt = customRound(parseFloat(chargedWeightElement.val())) * parseFloat(rateElement.val())
                amountElement.val(calculatedAmt)
            } else if (rateONElement.val() === "packages") {
                calculatedAmt = parseInt(packageElement.val()) * parseFloat(rateElement.val())
                amountElement.val(customRound(calculatedAmt))
            }


            //calculating total amt
            const allAMTElement = $(".amount")
            const elementArray = [...allAMTElement];
            let basicFreight = 0
            elementArray.forEach(data => {
                basicFreight = parseFloat(basicFreight) + parseFloat(data.value)
            })
            $("#basicFreight").val(customRound(basicFreight))
            $("#basicFreight").trigger("input")
        })


    </script>


    <script>
        $(document).on("input", ".sub-total", function () {

            const all = $(".sub-total")
            const allArray = [...all]
            let subTotal = 0
            allArray.forEach(data => {
                subTotal = parseFloat(subTotal) + parseFloat(data.value)
                if (data.value === "") {
                    data.value = 0
                    $("#subTotal").val(customRound(parseFloat(subTotal)))
                    $("#selectGstPaidBy").trigger("change")
                }


            })

            $("#subTotal").val(customRound(parseFloat(subTotal)))
            $("#selectGstPaidBy").trigger("change")

        })

    </script>


    <!--Addiing New ROWS-->
    <script>
        $("#chargedWeightNew").on("keydown", function (event) {
            //setting freight details

            if (event.key === "Tab" && !event.shiftKey) {

                const NOP = document.getElementById("numberOfPackagesNew").value;
                const selectPackaging = document.getElementById("selectPackagingNew");
                const goodsDescription = document.getElementById("selectGoodsDescriptionNew");
                const actualWeight = document.getElementById("actualWeightNew").value;
                const chargedWeight = document.getElementById("chargedWeightNew").value;
                const rateON = $("#rateONNew");
                const rate = document.getElementById("rateNew").value;

                if (NOP === "") {
                    showError("Number of Packages is Required");
                } else if (selectPackaging.value === "") {
                    showError("Packaging Type is Required");
                } else if (goodsDescription.value === "") {
                    showError("Goods Description is Required");
                } else if(parseInt(chargedWeight) <  parseInt(actualWeight)) {
                    showError("Actual Weight cannot be greater than Charged Weight");
                } else if (parseFloat(actualWeight) < 1) {
                    showError("Actual Weight is Required");
                } else if (parseFloat(chargedWeight) < 1) {
                    showError("Charged Weight is Required");
                } else if (parseFloat(NOP) < 1) {
                    showError("NOP is Required")
                } else if ($("#selectBilledTo").val() === "") {
                    showError("Please Select Billed To")
                } else if ($("#fromLocation").val() === "") {
                    showError("Please Select From Location")
                } else if ($("#toLocation").val() === "") {
                    showError("Please Select To Location")
                } else {
                    fetch(`/masters/rates/rate-master/get-rate-on?billedTo=${$("#selectBilledTo").val()}&from=${$("#fromLocation").val()}&to=${$("#toLocation").val()}`, {
                        method: "GET"
                    }).then(response => {
                        if (response.status === 200) {
                            return response.json().then(data => {
                                rateON.empty()
                                const option = `<option></option>`
                                rateON.append(option)
                                for (const info of data) {
                                    const option = `<option value="${info.id}">${info.rateON}</option>`

                                    rateON.append(option)
                                }
                                rateON.prop("disabled", false).select2()
                                $("#rateONNew").focus()
                                $("#rateNew").prop("disabled", true)


                            })
                        }
                    })
                }
            }
        })
    </script>
    <script>

        $("#rateONNew").on("change", function () {
            const value = $("#rateONNew").val()

            if (value == "actualWeight" || value == "chargedWeight" || value == "PKG") {

                $("#rateNew").prop("disabled", false)
                $("#amountNew").prop("disabled", true)
            } else if (value == "FTL") {
                $("#rateNew").prop("disabled", true)
                $("#amountNew").prop("disabled", false)
            } else {

                manageBilling()
            }
        })

        $("#rateNew").on("keydown", function (event) {

            if (event.key === "Tab" && !event.shiftKey) {

                if (parseFloat($("#rateNew").val()) < 1) {
                    showError("Please Enter Valid Rate")
                } else {

                    manageBilling("rate")
                }
            }
        })

        $("#amountNew").on("keydown", function (event) {

            if (event.key === "Tab" && !event.shiftKey) {

                if (parseFloat($("#amountNew").val()) < 1) {
                    showError("Please Enter Valid Amount")
                } else {

                    manageBilling("amount")
                }
            }
        })
    </script>
    <script>
        function manageBilling(valid) {

            const NOP = document.getElementById("numberOfPackagesNew").value;
            const selectPackaging = document.getElementById("selectPackagingNew")
            const goodsDescription = document.getElementById("selectGoodsDescriptionNew");
            const actualWeight = document.getElementById("actualWeightNew").value;
            const chargedWeight = document.getElementById("chargedWeightNew").value;
            const rateON = document.getElementById("rateONNew");
            const rate = document.getElementById("rateNew").value;

            if (NOP === "") {
                showError("Number of Packages is Required");
            } else if (selectPackaging.value === "") {
                showError("Packaging Type is Required");
            } else if (goodsDescription.value === "") {
                showError("Goods Description is Required");
            } else if (actualWeight === "") {
                showError("Actual Weight is Required");
            } else if (chargedWeight === "") {
                showError("Charged Weight is Required");
            } else if (rateON.value === "") {
                showError("Rate On is Required");
            } else if (valid && valid === "rate" && parseFloat(rate) < 1) {
                showError("Rate is Required");
            } else if (valid && valid === "amount" && parseFloat($("#amountNew").val()) < 1) {
                showError("Amount is Required")
            } else if (containsLetters(NOP)) {
                showError("Please Enter Valid Number of Packages");
            } else if (containsLetters(rate)) {
                showError("Please Enter a Valid Rate");
            } else if ($("#selectBilledTo").val() === "") {
                showError("Please Select Billed To")
            } else {
                if (rateON.value === "actualWeight") {

                    // Reset input values
                    document.getElementById("numberOfPackagesNew").value = "0";
                    document.getElementById("actualWeightNew").value = "0";
                    document.getElementById("chargedWeightNew").value = "0";
                    document.getElementById("rateNew").value = "0";

                    var amount = rate * actualWeight;
                    amount = customRound(amount)
                    addNewRow(NOP, selectPackaging.value, goodsDescription.value, actualWeight, chargedWeight, rateON, rate, amount);

                    $("#selectPackagingNew").val(null).trigger("change.select2");
                    $("#selectGoodsDescriptionNew").val(null).trigger("change.select2");
                    $("#rateONNew").val(null).trigger("change.select2");
                    setTimeout(function () {
                        $("#numberOfPackagesNew").focus()
                    }, 150)
                } else if (rateON.value === "chargedWeight") {
                    document.getElementById("numberOfPackagesNew").value = "0";
                    document.getElementById("actualWeightNew").value = "0";
                    document.getElementById("chargedWeightNew").value = "0";
                    document.getElementById("rateNew").value = "0";

                    var amount = rate * chargedWeight;
                    amount = customRound(amount)
                    addNewRow(NOP, selectPackaging.value, goodsDescription.value, actualWeight, chargedWeight, rateON, rate, amount);
                    $("#selectPackagingNew").val(null).trigger("change.select2");
                    $("#selectGoodsDescriptionNew").val(null).trigger("change.select2");
                    $("#rateONNew").val(null).trigger("change.select2");
                    setTimeout(function () {
                        $("#numberOfPackagesNew").focus()
                    }, 150)
                } else if (rateON.value === "PKG") {
                    document.getElementById("numberOfPackagesNew").value = "0";
                    document.getElementById("actualWeightNew").value = "0";
                    document.getElementById("chargedWeightNew").value = "0";
                    document.getElementById("rateNew").value = "0";
                    document.getElementById("amountNew").value = "0";
                    var amount = rate * NOP;
                    amount = customRound(amount)
                    addNewRow(NOP, selectPackaging.value, goodsDescription.value, actualWeight, chargedWeight, rateON, rate, amount);
                    $("#selectPackagingNew").val(null).trigger("change.select2");
                    $("#selectGoodsDescriptionNew").val(null).trigger("change.select2");
                    $("#rateONNew").val(null).trigger("change.select2");
                    setTimeout(function () {
                        $("#numberOfPackagesNew").focus()
                    }, 150)
                } else if (rateON.value === "FTL") {
                    document.getElementById("numberOfPackagesNew").value = "0";
                    document.getElementById("actualWeightNew").value = "0";
                    document.getElementById("chargedWeightNew").value = "0";
                    document.getElementById("rateNew").value = "0";

                    var amount = document.getElementById("amountNew").value
                    amount = customRound(amount)
                    addNewRow(NOP, selectPackaging.value, goodsDescription.value, actualWeight, chargedWeight, rateON, rate, amount);
                    $("#selectPackagingNew").val(null).trigger("change.select2");
                    $("#selectGoodsDescriptionNew").val(null).trigger("change.select2");
                    $("#rateONNew").val(null).trigger("change.select2");
                    document.getElementById("amountNew").value = "0";
                    setTimeout(function () {
                        $("#numberOfPackagesNew").focus()
                    }, 150)
                } else {

                    //wehn default rate is added
                    fetch(`/masters/rates/rate-master/get-rate?billedTo=${$("#selectBilledTo").val()}&from=${$("#fromLocation").val()}&to=${$("#toLocation").val()}&NOP=${NOP}&actualWeight=${actualWeight}&chargedWeight=${chargedWeight}&rateON=${$("#rateONNew").val()}`, {
                        method: "GET"
                    }).then(response => {
                        if (response.status === 200) {

                            return response.json().then(data => {

                                for (const info of data) {
                                    if (info.chargeType === "freight") {

                                        $('#basicFreight').val(parseFloat($('#basicFreight').val()) + info.amount)

                                    } else if (info.chargeType === "collection") {

                                        $('#collectionCharges').val(parseFloat($('#collectionCharges').val()) + info.amount)

                                    } else if (info.chargeType === "delivery") {

                                        $('#deliveryCharges').val(parseFloat($('#deliveryCharges').val()) + info.amount)

                                    } else if (info.chargeType === "labour") {

                                        $('#labourCharges').val(parseFloat($('#labourCharges').val()) + info.amount)

                                    } else if (info.chargeType === "rebooking") {

                                        $('#rebookingCharges').val(parseFloat($('#rebookingCharges').val()) + info.amount)

                                    } else if (info.chargeType === "loadingDetention") {

                                        $('#loadingDetention').val(parseFloat($('#loadingDetention').val()) + info.amount)

                                    } else if (info.chargeType === "unloadingDetention") {

                                        $('#unloadingDetention').val(parseFloat($('#unloadingDetention').val()) + info.amount)

                                    } else if (info.chargeType === "demmurage") {

                                        $('#demmurage').val(parseFloat($('#demmurage').val()) + info.amount)

                                    } else if (info.chargeType === "unloading") {

                                        $('#unloadingCharges').val(parseFloat($('#unloadingCharges').val()) + info.amount)

                                    } else if (info.chargeType === "exWeight") {

                                        $('#exWeight').val(parseFloat($('#exWeight').val()) + info.amount)

                                    } else if (info.chargeType === "exHeight") {

                                        $('#exHeight').val(parseFloat($('#exHeight').val()) + info.amount)

                                    } else if (info.chargeType === "st") {

                                        $('#stCharges').val(parseFloat($('#stCharges').val()) + info.amount)

                                    } else if (info.chargeType === "others") {

                                        $('#others').val(parseFloat($('#others').val()) + info.amount)

                                    }

                                }
                                $("#basicFreight").trigger("input")
                                const total = data.reduce((accumulator, currentValue) => accumulator + currentValue.amount, 0);
                                addNewRow(NOP, selectPackaging.value, goodsDescription.value, actualWeight, chargedWeight, rateON, rate, total);
                                $("#selectPackagingNew").val(null).trigger("change.select2");
                                $("#selectGoodsDescriptionNew").val(null).trigger("change.select2");
                                $("#rateONNew").val(null).trigger("change.select2");
                                document.getElementById("numberOfPackagesNew").value = "0";
                                document.getElementById("actualWeightNew").value = "0";
                                document.getElementById("chargedWeightNew").value = "0";
                                document.getElementById("rateNew").value = "0";
                                setTimeout(function () {
                                    $("#numberOfPackagesNew").focus()
                                }, 150)
                            })
                        } else if (response.status === 400) {
                            const emptyOption = `<option></option>`
                            $("#rateONNew").append(emptyOption)
                            $("#rateNew").prop("disabled", false)
                            const optionINFO = [
                                {
                                    rateON: "Actual Weight",
                                    id: "actualWeight"
                                }, {
                                    rateON: "Charged Weight",
                                    id: "chargedWeight"
                                }, {
                                    rateON: "Packages",
                                    id: "PKG"
                                }, {
                                    rateON: "FTL (Fix)",
                                    id: "FTL"
                                },
                            ]
                            $("#rateONNew").empty()
                            optionINFO.forEach(optionVALUE => {
                                const option = `<option value="${optionVALUE.id}">${optionVALUE.rateON}</option>`
                                $("#rateONNew").append(option)

                            })

                            $("#rateONNew").select2()
                            $("#rateONNew").focus()
                        }
                    })
                }
            }
        }





        function showError(message) {
            Swal.fire({
                text: message,
                icon: "error",
                buttonsStyling: !1,
                confirmButtonText: "Ok, got it!",
                customClass: {
                    confirmButton: "btn btn-primary"
                }
            })
        }

        function containsLetters(inputString) {
            // Regular expression to match any letter (uppercase or lowercase)
            const regex = /[a-zA-Z]/;

            // Test if the input string contains at least one letter
            return regex.test(inputString);
        }



        function addNewRow(NOP, selectPackaging, goodsDescription, actualWeight, chargedWeight, rateON, rate, amount) {

            const trElements = $("tr[data-rowid]");
            const rowCounter = trElements.length
            const itemTableBody = document.getElementById("itemTableBody");
            const newRow = document.createElement("tr");
            newRow.className = "border-bottom border-bottom-dashed"
            newRow.setAttribute("data-kt-elements", "item")
            newRow.setAttribute("data-rowid", rowCounter)


            newRow.innerHTML = ` 
                             <tr class="border-bottom border-bottom-dashed" data-kt-element="item" data-rowid="${rowCounter}">
                                            <td class="pe-7">
                                                <input type="hidden" name="materialID" value="NEW">
                                                <input value="${NOP}" disabled type="text" class="NOP form-control form-control-solid mb-2"
                                                    name="numberOfPackages" id="numberOfPackages${rowCounter}" placeholder="QTY">

                                               
                                            </td>

                                            <td class="ps-0">
                                                <select disabled name="MOP" id="selectPackaging${rowCounter}" class="MOP form-select form-select-solid"data-placeholder="Packaging" data-control="select2">
                                                    <option></option>
                                                    <% mopData.forEach((data)=> {%> 
                                                        <option value="<%=data.id%>"><%=data.methodOfPackaging%></option>
                                                    <%}) %>
                                                
                                                </select>
                                            </td>

                                            <td class="ps-0">
                                                <select disabled name="goodsDescription" id="selectGoodsDescription${rowCounter}" class="goodsDescription form-select form-select-solid"data-placeholder="Goods Type" data-control="select2">
                                                    <option></option>
                                                    <% goodsDescriptionData.forEach((data)=> {%> 
                                                        <option value="<%=data.id%>"><%=data.goodsDescription%></option>
                                                    <%}) %>
                                                
                                                </select>
                                            </td>

                                            <td class="ps-0">
                                                <input value="${actualWeight}" disabled class="actual-weight form-control form-control-solid" type="text" name="actualWeight" id="actualWeight${rowCounter}" placeholder="Actual Weight">
                                            </td>
                                            <td class="ps-0">
                                                <input value="${chargedWeight}" disabled class="charged-weight form-control form-control-solid" type="text" name="chargedWeight" id="chargedWeight${rowCounter}" placeholder="Charged Weight">
                                            </td>
                                            <td>
                                                <select disabled name="rateON" id="rateON${rowCounter}"class="rateON form-select form-select-solid"data-placeholder="Rate On" data-control="select2">
                                                    
                                                            <option selected value="${rateON.value}">${rateON.options[rateON.selectedIndex].textContent}</option>
                                                     
                                                 
                                                
                                                </select>
                                            </td>
                                            <td class="pt-5">
                                                <input disabled value="${rate}" class="rate form-control form-control-solid" type="text" name="rate" id="rate${rowCounter}" placeholder="Rate">
                                            </td>
                                            <td class="pt-5"> <input disabled value="${amount}" class="amount form-control form-control-solid" type="text" name="amount" id="amount${rowCounter}" disabled placeholder="Amount"></td>
                                            <td class="pt-5 text-end">
                                                <button onclick="editRow('${rowCounter}')" type="button" class="btn btn-sm btn-icon btn-primary btn-active-color-grey remove-item" data-kt-element="remove-item">
                                                    <i class="ki-duotone ki-pencil fs-1"><span class="path1"></span><span class="path2"></span></span></i>
                                                  </button>
                                                <button onclick="deleteRow('${rowCounter}')" type="button" class="btn btn-sm btn-icon btn-danger btn-active-color-grey remove-item" data-kt-element="remove-item">
                                                    <i class="ki-duotone ki-trash-square fs-1"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span></i>
                                                  </button>
                                              </td>
                                              `



            itemTableBody.appendChild(newRow);

            //Selecting packaging by defualt
            const selectPackagingNew = newRow.querySelector(`#selectPackaging${rowCounter}`)
            selectPackagingNew.options.forEach((data) => {
                if (data.value === selectPackaging) {
                    data.selected = true
                }
            })

            //selecting goods content by default
            const goodsDescriptionNew = newRow.querySelector(`#selectGoodsDescription${rowCounter}`)
            goodsDescriptionNew.options.forEach((data) => {
                if (data.value === goodsDescription) {
                    data.selected = true
                }
            })




            const rateONNew = newRow.querySelector(`#rateON${rowCounter}`)
            rateONNew.options.forEach((data) => {
                if (data.value === rateON) {
                    data.selected = true
                }
            })


            //calculating total amt
            const allAMTElement = $(".amount")
            const elementArray = [...allAMTElement];
            let basicFreight = 0
            elementArray.forEach(data => {
                basicFreight = parseFloat(basicFreight) + parseFloat(data.value)
            })
            $("#basicFreight").val(customRound(basicFreight))
            $("#basicFreight").trigger("input")
            if ($("#selectGstPaidBy").val() === "transporter") {
                $("#selectGstPaidBy").trigger("change")
            } else {
                $(".total").trigger("change")
            }




        }

        function deleteRow(id) {
            var rowToDelete = document.querySelector(`tr[data-rowid="${id}"]`);
            if (rowToDelete) {
                rowToDelete.remove();
                //calculating total amt
                const allAMTElement = $(".amount")
                const elementArray = [...allAMTElement];
                let basicFreight = 0
                elementArray.forEach(data => {
                    basicFreight = parseFloat(basicFreight) + parseFloat(data.value)
                })
                $("#basicFreight").val(customRound(basicFreight))
                $("#basicFreight").trigger("input")
            } else {
                console.log(`Row with data-rowid="${id}" not found.`);
            }
        }


        function editRow(rowId) {
            const rateONElement = $(`#rateON${rowId}`);
            const rateElement = $(`#rate${rowId}`);
            const amountElement = $(`#amount${rowId}`);
            const actualWeightElement = $(`#actualWeight${rowId}`)
            const chargedWeightElement = $(`#chargedWeight${rowId}`)
            const packageElement = $(`#numberOfPackages${rowId}`)

            $("#numberOfPackagesNew").val(packageElement.val())
            $("#selectPackagingNew option").each(function () {
                if ($(this).val() === $(`#selectPackaging${rowId}`).val()) {
                    $(this).prop("selected", true);
                }
            });

            $("#selectGoodsDescriptionNew option").each(function () {
                if ($(this).val() === $(`#selectGoodsDescription${rowId}`).val()) {
                    $(this).prop("selected", true);
                }
            });

            $("#actualWeightNew").val(actualWeightElement.val())
            $("#chargedWeightNew").val(chargedWeightElement.val())
            $("#selectGoodsDescriptionNew").select2()
            $("#selectPackagingNew").select2()

            setTimeout(function () {
                $("#numberOfPackagesNew").focus()
            }, 10)

            var rowToDelete = document.querySelector(`tr[data-rowid="${rowId}"]`);
            if (rowToDelete) {
                rowToDelete.remove();
                //calculating total amt
                const allAMTElement = $(".amount")
                const elementArray = [...allAMTElement];
                let basicFreight = 0
                elementArray.forEach(data => {
                    basicFreight = parseFloat(basicFreight) + parseFloat(data.value)
                })
                $("#basicFreight").val(customRound(basicFreight))
                $("#basicFreight").trigger("input")
            } else {
                console.log(`Row with data-rowid="${id}" not found.`);
            }
        }
    </script>


    <script>
        $("#selectGstPaidBy").on("change", function () {
            if ($("#selectGstPaidBy").val() === "transporter") {
                const totalFreight = customRound(parseFloat($("#subTotal").val()))
                const CGST = (totalFreight * 2.5) / 100;
                const SGST = (totalFreight * 2.5) / 100;
                const totalGST = CGST + SGST
                $("#CGST").val(CGST)
                $("#SGST").val(SGST)
                $("#gstSubTotal").val(totalGST)
                $(".total").trigger("change")
            } else {
                $("#CGST").val(0)
                $("#SGST").val(0)
                $("#IGST").val(0)
                $("#gstSubTotal").val(0)
                $(".total").trigger("change")
            }
        })
    </script>

    <script>

        $(".total").on("change", function () {
            const element = $(".total")
            const newElement = [...element]
            let total = 0
            newElement.forEach(data => {
                total = total + parseFloat(data.value)
            })

            $("#total").val(customRound(total))
        })

    </script>

    <script>
        const form = document.getElementById("lrForm")
        var validator = FormValidation.formValidation(
            form,
            {
                fields: {
                    loadType: {
                        validators: {
                            notEmpty: {
                                message: 'Please select load Type'
                            }
                        }
                    },
                    from: {
                        validators: {
                            notEmpty: {
                                message: 'Please Select From Location'
                            }
                        }
                    },
                    to: {
                        validators: {
                            notEmpty: {
                                message: 'Please Select Destination'
                            }
                        }
                    },
                    consignor: {
                        validators: {
                            notEmpty: {
                                message: 'Please Select Consignor'
                            }
                        }
                    },
                    consignee: {
                        validators: {
                            notEmpty: {
                                message: 'Please Select Consignee'
                            }
                        }
                    },
                    billedAt: {
                        validators: {
                            notEmpty: {
                                message: 'Please Select Billed At'
                            }
                        }
                    },
                    billedTo: {
                        validators: {
                            notEmpty: {
                                message: 'Please Select Billed To'
                            }
                        }
                    },
                    gstPaidBy: {
                        validators: {
                            notEmpty: {
                                message: 'Please Select GST Paid By'
                            }
                        }
                    }

                },

                plugins: {
                    trigger: new FormValidation.plugins.Trigger(),
                    bootstrap: new FormValidation.plugins.Bootstrap5({
                        rowSelector: '.fv-row',
                        eleInvalidClass: '',
                        eleValidClass: ''
                    })
                }
            }
        );

        // Submit button handler
        const updateButton = document.getElementById('lrUPDATE');
 
        updateButton.addEventListener('click', function (e) {
            // Prevent default button action
      
            e.preventDefault();
 
            // Validate form before submit
            
    
            if (validator) {
                validator.validate().then(function (status) {
                    if (status == 'Valid') {
                        
                        const NOPInput = document.querySelectorAll(".NOP")
                        const MOPInput = document.querySelectorAll(".MOP")
                        const goodsDescriptionInput = document.querySelectorAll(".goodsDescription")
                        const actualWeightInput = document.querySelectorAll(".actual-weight")
                        const chargedWeightInput = document.querySelectorAll(".charged-weight")
                        const rateONInput = document.querySelectorAll(".rateON")
                        const rateInput = document.querySelectorAll(".rate")
                        const amountInput = document.querySelectorAll(".amount")
                        const ewayBillInput = document.querySelectorAll(".ewaybill")
                        const invoiceNumberInput = document.querySelectorAll(".invoice-number")
                        const invoiceValueInput = document.querySelectorAll(".invoice-value")
                        const expiry = document.querySelectorAll(".expiry")
                        if (NOPInput.length === 0 || MOPInput.length === 0 || goodsDescriptionInput.length === 0 || actualWeightInput.length === 0 || chargedWeightInput.length === 0 || rateONInput.length === 0 || rateInput.length === 0 || amountInput.length === 0) {
                            showError("Please Add Atleast 1 Billing Item")
                        } else if (ewayBillInput.length === 0 || invoiceNumberInput.length === 0 || invoiceValueInput.length === 0 || expiry.length === 0) {
                            showError("Please Enter atleast 1 Invoice Detail")
                        } else if ($("#deliverySource").prop("checked") === true && $("#selectDeliverySource").val() === "") {
                            showError("Delivery Source Is Required")
                        } else if ($("#bookingSource").prop("checked") === true && $("#selectBookingSource").val() === "") {
                            showError("Booking Source Is Required")
                        } else {
                            const loadTypeInput = $("#selectLoadType"); // Assuming "loadType" is a Select2 element
                            const vehicleInput = $("#selectVehicle"); // Assuming "selectvehicle" is a Select2 element

                            // Check if the selected option in "loadType" is "FTL"
                            if (loadTypeInput.val() === "FTL" && !vehicleInput.val()) {
                                showError("Please Select Vehicle Number");
                            } else {
                                $("#lrUPDATE").attr("data-kt-indicator", "on").prop("disabled", true);
                                $("#modalCloseBTN").prop("disabled", true);
                                const form = document.getElementById("lrForm");

                                // Enable disabled inputs and selects
                                const disabledInputs = form.querySelectorAll("input[disabled], select[disabled]");
                                for (const input of disabledInputs) {
                                    input.removeAttribute("disabled");
                                }

                                // Serialize the form data
                                const formData = new FormData(form);

                                // Re-disable previously disabled inputs and selects
                                for (const input of disabledInputs) {
                                    input.setAttribute("disabled", "disabled");
                                }

                                // Create a URLSearchParams object and add form data to it
                                const data = new URLSearchParams();
                                for (const pair of formData) {
                                    data.append(pair[0], pair[1]);
                                }

                                // Send the form data to the server
                                fetch("/transactions/booking/lorry-reciept/update", {
                                    method: "POST",
                                    headers: {
                                        'Content-Type': 'application/x-www-form-urlencoded'
                                    },
                                    body: data
                                }).then((data) => {
                                    if (data.status === 400) {

                                        return data.json().then((message) => {
                                            Swal.fire({
                                                text: message.message,
                                                icon: "error",
                                                buttonsStyling: !1,
                                                confirmButtonText: "Ok, got it!",
                                                customClass: {
                                                    confirmButton: "btn btn-primary"
                                                }
                                            }).then(response => {
                                                if (response.isConfirmed) {
                                                    $("#lrUPDATE").attr("data-kt-indicator", "off").prop("disabled", false);
                                                    $("#modalCloseBTN").prop("disabled", false);
                                                }
                                            })
                                        })

                                    } else if (data.status === 200) {
                                        Swal.fire({
                                            text: "LR Updated Successfully",
                                            icon: "success",
                                            buttonsStyling: !1,
                                            confirmButtonText: "Ok, got it!",
                                            customClass: {
                                                confirmButton: "btn btn-primary"
                                            }
                                        }).then((response) => {
                                            if (response.isConfirmed) {
                                                location.reload()
                                            }
                                        })
                                    } else if (data.status === 401) {
                                        Swal.fire({
                                            text: "You are not authorized to perform this action",
                                            icon: "error",
                                            buttonsStyling: !1,
                                            confirmButtonText: "Ok, got it!",
                                            customClass: {
                                                confirmButton: "btn btn-primary"
                                            }
                                        }).then((data) => {
                                            if (data.isConfirmed) {
                                                $("#lrUPDATE").attr("data-kt-indicator", "off").prop("disabled", false);
                                                $("#modalCloseBTN").prop("disabled", false);
                                            }
                                        })
                                    } else if(data.status === 500) {
                                        Swal.fire({
                                            text: "Something Went Wrong",
                                            icon: "error",
                                            buttonsStyling: !1,
                                            confirmButtonText: "Ok, got it!",
                                            customClass: {
                                                confirmButton: "btn btn-primary"
                                            }
                                        }).then((data) => {
                                            if (data.isConfirmed) {
                                                $("#lrUPDATE").attr("data-kt-indicator", "off").prop("disabled", false);
                                                $("#modalCloseBTN").prop("disabled", false);
                                            }
                                        })
                                    }
                                })

                            }

                        }
                    }
                });
            }
        });
    </script>

    <script>

        // Submit button handler
        const submitButton = document.getElementById('lrSubmit');
        submitButton.addEventListener('click', function (e) {
            // Prevent default button action
            e.preventDefault();
           
            // Validate form before submit
            if (validator) {
                validator.validate().then(function (status) {
                    console.log('validated!');

                    if (status == 'Valid') {
                        const NOPInput = document.querySelectorAll(".NOP")
                        const MOPInput = document.querySelectorAll(".MOP")
                        const goodsDescriptionInput = document.querySelectorAll(".goodsDescription")
                        const actualWeightInput = document.querySelectorAll(".actual-weight")
                        const chargedWeightInput = document.querySelectorAll(".charged-weight")
                        const rateONInput = document.querySelectorAll(".rateON")
                        const rateInput = document.querySelectorAll(".rate")
                        const amountInput = document.querySelectorAll(".amount")

                        if (NOPInput.length === 0 || MOPInput.length === 0 || goodsDescriptionInput.length === 0 || actualWeightInput.length === 0 || chargedWeightInput.length === 0 || rateONInput.length === 0 || rateInput.length === 0 || amountInput.length === 0) {
                            showError("Please Add Atleast 1 Billing Item")
                        } else {
                            const loadTypeInput = $("#selectLoadType"); // Assuming "loadType" is a Select2 element
                            const vehicleInput = $("#selectVehicle"); // Assuming "selectvehicle" is a Select2 element

                            // Check if the selected option in "loadType" is "FTL"
                            if (loadTypeInput.val() === "FTL" && !vehicleInput.val()) {
                                showError("Please Select Vehicle Number");
                            } else if ($("#deliverySource").prop("checked") === true && $("#selectDeliverySource").val() === "") {
                            showError("Delivery Source Is Required")
                        } else if ($("#bookingSource").prop("checked") === true && $("#selectBookingSource").val() === "") {
                            showError("Booking Source Is Required")
                        }  else {
                            $("#lrSubmit").attr("data-kt-indicator", "on").prop("disabled", true);
                            $("#modalCloseBTN").prop("disabled", true);
                                const form = document.getElementById("lrForm");

                                // Enable disabled inputs and selects
                                const disabledInputs = form.querySelectorAll("input[disabled], select[disabled]");
                                for (const input of disabledInputs) {
                                    input.removeAttribute("disabled");
                                }

                                // Serialize the form data
                                const formData = new FormData(form);

                                // Re-disable previously disabled inputs and selects
                                for (const input of disabledInputs) {
                                    input.setAttribute("disabled", "disabled");
                                }

                                // Create a URLSearchParams object and add form data to it
                                const data = new URLSearchParams();
                                for (const pair of formData) {
                                    data.append(pair[0], pair[1]);
                                }

                                // Send the form data to the server
                                fetch("/transactions/booking/lorry-reciept/new", {
                                    method: "POST",
                                    headers: {
                                        'Content-Type': 'application/x-www-form-urlencoded'
                                    },
                                    body: data
                                }).then((data) => {
                                    if (data.status === 400) {

                                        return data.json().then((message) => {
                                            Swal.fire({
                                                text: message.message,
                                                icon: "error",
                                                buttonsStyling: !1,
                                                confirmButtonText: "Ok, got it!",
                                                customClass: {
                                                    confirmButton: "btn btn-primary"
                                                }
                                            }).then(response => {
                                                if (response.isConfirmed) {
                                                    $("#lrSubmit").attr("data-kt-indicator", "off").prop("disabled", false);
                                                    $("#modalCloseBTN").prop("disabled", false);
                                                }
                                            })
                                        })

                                    } else if (data.status === 200) {
                                        Swal.fire({
                                            text: "New LR Create Successfully",
                                            icon: "success",
                                            buttonsStyling: !1,
                                            confirmButtonText: "Ok, got it!",
                                            customClass: {
                                                confirmButton: "btn btn-primary"
                                            }
                                        }).then((response) => {
                                            if (response.isConfirmed) {
                                                location.reload()
                                            }
                                        })
                                    } else if (data.status === 401) {
                                        Swal.fire({
                                            text: "You are not authorized to perform this action",
                                            icon: "error",
                                            buttonsStyling: !1,
                                            confirmButtonText: "Ok, got it!",
                                            customClass: {
                                                confirmButton: "btn btn-primary"
                                            }
                                        }).then(response => {
                                            if (response.isConfirmed) {
                                                $("#lrSubmit").attr("data-kt-indicator", "off").prop("disabled", false);
                                                $("#modalCloseBTN").prop("disabled", false);
                                            }
                                        })
                                    }
                                })

                            }

                        }
                    }
                });
            }
        })
    </script>

    <script>
        const loadTypeElement = $("#selectLoadType")
        function editLR(id) {
            $("#serialDiv").css("display", "none")
            $("#lrFormTitle").html("Edit Lorry Reciept")
            $("#lrSubmit").hide()
            $("#lrUPDATE").show()
            $("#lrForm").trigger("reset")
            $("#lrContent tbody tr:not(:first)").remove();
            $("#eway-table tbody tr:not(:first)").remove();
            $("#lrForm select[data-control='select2']").select2();

            $("#lrInputDiv").css("display", "none")
            $("#lrSelectDiv").css("display", "block")
            const lrNumber = id

            fetch(`/transactions/booking/lorry-reciept/get-lr-detail?id=${lrNumber}`, {
                method: "GET"
            }).then(response => {
                if (response.status === 200) {


                    return response.json().then(data => {

                        const option = `<option value="${data._id}" selected> ${data.lrNumber} </option>`
                        $("#lrNumber").append(option)

                        //enabling all inputs
                        $('input, select, button').prop('disabled', false);
                        $("#lrNumber").prop("disabled", true)
                        $("#lrNumber").select2()

                        $('#basicFreight').prop('disabled', true);
                        $('#subTotal').prop('disabled', true);
                        $("#amountNew").prop("disabled", true)
                        $("#CGST").prop("disabled", true)
                        $("#SGST").prop("disabled", true)
                        $("#IGST").prop("disabled", true)
                        $("#gstSubTotal").prop("disabled", true)


                        //deliovery charge input status based on delivery mode

                        if (data.deliveryBy !== "DOOR") {
                            $('#deliveryCharges').val("0")
                            $('#deliveryCharges').prop('disabled', true);
                        }

                        //for setting Load Type
                        var optionToSelect = $(`#selectLoadType option[value="${data.loadType}"]`);
                        optionToSelect.attr('selected', 'selected');
                        loadTypeElement.select2()

                        //setting vehicle if load type ftl
                        if (data.loadType === "FTL") {
                            var optionToSelectq = $(`#selectVehicle option[value="${data.vehicle}"]`);
                            optionToSelectq.attr('selected', 'selected');
                            $("#selectVehicle").prop("disabled", false)
                            $("#selectVehicle").select2()
                        } else {
                            $("#selectVehicle").prop("disabled", true)
                        }

                        //for setting from
                        var optionToSelect2 = $(`#fromLocation option[value="${data.from}"]`);
                        optionToSelect2.attr('selected', 'selected');
                        $("#fromLocation").select2()

                        //for setting to
                        var optionToSelect3 = $(`#toLocation option[value="${data.to}"]`);
                        optionToSelect3.attr('selected', 'selected');
                        $("#toLocation").select2()

                        //for setting consignor
                        var optionToSelect4 = $(`#selectConsignor option[value="${data.consignor}"]`);
                        optionToSelect4.attr('selected', 'selected');
                        $("#selectConsignor").select2()

                        //for setting consignee
                        var optionToSelect5 = $(`#selectConsignee option[value="${data.consignee}"]`);
                        optionToSelect5.attr('selected', 'selected');
                        $("#selectConsignee").select2()

                        //setting gst of consignor and consignee
                        $("#consignorGST").val(`${data.consignorGST}`).prop("disabled", true)
                        $("#consigneeGST").val(`${data.consigneeGST}`).prop("disabled", true)

                        //for setting billing at
                        var optionToSelect6 = $(`#selectBilledAt option[value="${data.billedAt}"]`);
                        optionToSelect6.attr('selected', 'selected');
                        $("#selectBilledAt").select2()

                        //for setting billing to
                        var optionToSelect6 = $(`#selectBilledTo option[value="${data.billedTo}"]`);
                        optionToSelect6.attr('selected', 'selected');
                        $("#selectBilledTo").select2()

                        //for setting gst paid by
                        var optionToSelect6 = $(`#selectGstPaidBy option[value="${data.gstPaidBy}"]`);
                        optionToSelect6.attr('selected', 'selected');
                        $("#selectGstPaidBy").select2()

                        //for setting invoice Number, invoice value, eway bill number, address

                        $("#deliveryAddress").val(`${data.deliveryAddress}`)

                        // for setting delivery By
                        var optionToSelect7 = $(`#deliveryBy option[value="${data.deliveryBy}"]`);
                        optionToSelect7.attr('selected', 'selected');
                        $("#deliveryBy").select2()

                        // for setting Material Hold
                        if (data.materialHold.atBookingGodown === true) {
                            $("#materialHold").prop("checked", true)
                            $("#holdAtDiv").css("display", "block")
                            $("#holdAt").prop("disabled", false)
                            $("#holdAt").prop("checked", true)
                            $("#holdAtLabel").html("At Booking Godown")
                        } else if (data.materialHold.atDeliveryGodown === true) {
                            $("#materialHold").prop("checked", true)
                            $("#holdAtDiv").css("display", "block")
                            $("#holdAt").prop("disabled", false)
                            $("#holdAt").prop("checked", false)
                            $("#holdAtLabel").html("At Delivery Godown")
                        } else {
                            $("#materialHold").prop("checked", false)
                            $("#holdAtDiv").css("display", "none")
                            $("#holdAt").prop("disabled", true)
                            $("#holdAt").prop("checked", false)
                        }


                        if (data.pod === true) {
                            $("#pod").prop("checked", true)
                        } else {
                            $("#pod").prop("checked", false)
                        }

                        if (data.risk === true) {
                            $("#risk").prop("checked", true)
                        } else {
                            $("#risk").prop("checked", false)
                        }



                        //setting lr and invoice date
                        $("#lr_date").val(`${data.date}`)
                        $("#invoiceDate").val(`${data.invoiceDate}`)



                        //setting freight details
                        $('#basicFreight').val(`${data.freightDetails.basicFreight}`)
                        $('#collectionCharges').val(`${data.freightDetails.collectionCharges}`)
                        $('#deliveryCharges').val(`${data.freightDetails.deliveryCharges}`)
                        $('#labourCharges').val(`${data.freightDetails.labourCharges}`)
                        $('#rebookingCharges').val(`${data.freightDetails.rebookingCharges}`)
                        $('#loadingDetention').val(`${data.freightDetails.loadingDetention}`)
                        $('#unloadingDetention').val(`${data.freightDetails.unloadingDetention}`)
                        $('#demmurage').val(`${data.freightDetails.demmurage}`)
                        $('#unloadingCharges').val(`${data.freightDetails.unloadingCharges}`)
                        $('#exWeight').val(`${data.freightDetails.exWeight}`)
                        $('#exHeight').val(`${data.freightDetails.exHeight}`)
                        $('#stCharges').val(`${data.freightDetails.stCharges}`)
                        $('#others').val(`${data.freightDetails.others}`)
                        $("#CGST").val(`${data.freightDetails.CGST}`)
                        $("#SGST").val(`${data.freightDetails.SGST}`)
                        $("#IGST").val(`${data.freightDetails.IGST}`)


                        //calling function to add row

                        addRow(data)

                    })
                } else if(response.status === 400) {
                    return response.json().then(message => {
                        showError(message.message)
                    })
                } else if (response.status === 401) {
                    showError("You Are Not Authorized To Perform This Action")
                } else if(response.status === 500) {
                    Swal.fire({
                        text: "Something Went Wrong",
                        icon: "error",
                        buttonsStyling: !1,
                        confirmButtonText: "Ok, got it!",
                        customClass: {
                            confirmButton: "btn btn-primary"
                        }
                    }).then(response=> {
                        if(response.isConfirmed) {
                            location.reload()
                        }
                    
                    })
                }
            })

        }
    </script>

    <script>
        function addLR() {
            $("#serialDiv").css("display", "block")
            $("#lrFormTitle").html("Add New Lorry Reciept")
            $("#lrForm").trigger("reset")
            $("#lrContent tbody tr:not(:first)").remove();
            $("#eway-table tbody tr:not(:first)").remove();
            $("#lrForm select[data-control='select2']").val(null)
            $("#lrForm select[data-control='select2']").select2();
            const today = new Date();
            const day = today.getDate().toString().padStart(2, '0');
            const month = (today.getMonth() + 1).toString().padStart(2, '0');
            const year = today.getFullYear();

            const formattedDate = `${day}-${month}-${year}`;
            $("#lr_date").val(formattedDate);
            $("#expiry").val(formattedDate);
            $("#deliveryBy option[value='DOOR']").prop("selected", true);
            $("#materialHold").prop("checked", false);
            $("#deliveryBy").select2()

            $("#lrUPDATE").hide()
            $("#lrSubmit").show()
            $("#lrInputDiv").css("display", "block")
            $("#lrSelectDiv").css("display", "none")
            setTimeout(function () {
                $("#lrNumberInput").focus()
            }, 450)

        }
    </script>
    <script>
        $("#ewayBillNumber").on("keydown", function () {
            if (event.key === "Tab" && !event.shiftKey) {
                addEwayBill()
            }
        })

    </script>

    <script>
        function addEwayBill() {
            const invoiceNumberElement = $("#invoiceNumber")
            const invoiceValueElement = $("#invoiceValue")
            const ewayBillNumberElement = $("#ewayBillNumber")
            const expiry = $("#expiry")
            if (invoiceNumberElement.val() === "") {
                showError("Please Enter Valid Invoice Number")
            } else if (invoiceValueElement.val() === "") {
                showError("Please Enter Valid Invoice Value")
            } else if ($("#eway").prop("checked") === true && invoiceValueElement.val() >= 50000 && ewayBillNumberElement.val().length !== 14) {
                showError("Please Enter A Valid Eway Bill Number");
            } else if (ewayBillNumberElement.val() !== "" && ewayBillNumberElement.val().length !== 14) {
                showError("Please Enter A Valid Eway Bill Number")
            } else if (ewayBillNumberElement.val() !== "" & expiry.val() === "") {
                showError("Please Select Eway Bill Expiry Date")
            } else {
                const ewayTable = $("#ewayBillTable")
                const trElements = ewayTable.find("tr")
                const rowID = trElements.length + 1
                const data = `
                                                                             <tr class="border-bottom border-bottom-dashed" data-kt-element="item" data-rowid="${rowID}">
                                                                                <td class="col-lg-3 ps-0">
                                                                                    <input value="${invoiceNumberElement.val()}" disabled  name="invoiceNumber" oninput="validateWholeNumber(this)" type="text" class="invoice-number form-control form-control-solid mb-2" placeholder="Invoice Number">
                                                                                </td>
                                                                                <td class="col-lg-3 ps-0">
                                                                                    <input value="${invoiceValueElement.val()}" disabled  name="invoiceValue" oninput="validateNumberWithDecimals(this)" class="invoice-value form-control form-control-solid" type="text" placeholder="Invoice Value">
                                                                                </td>
                                                                                <td class="col-lg-3 ps-0">
                                                                                    <input value="${expiry.val()}" disabled name="expiry" class="expiry form-control form-control-solid" placeholder="Set Eway Bill Expiry" id="kt_datepicker_2"/>
                                                                                </td>
                                                                                <td class="col-lg-3 ps-0">
                                                                                    <input value="${ewayBillNumberElement.val()}" disabled name="ewayBillNumber" oninput="validateNumberWithDecimals(this)" class="ewaybill form-control form-control-solid" type="text" placeholder="E-Way Bill Number">
                                                                                </td>
                                                                              
                                                                                <td class="col-lg-1 pt-5 text-end">
                                                                                    <button type="button" onclick="removeEwayBill(${rowID})" class="btn btn-sm btn-icon btn-danger btn-active-light-danger" data-kt-element="add-item">
                                                                                        <i class="ki-duotone ki-trash-square fs-1">
                                                                                            <span class="path1"></span>
                                                                                            <span class="path2"></span>
                                                                                            <span class="path3"></span>
                                                                                            <span class="path4"></span>
                                                                                        </i>
                                                                                    </button>
                                                                                </td>
                                                                            </tr>
                                                                         `

                ewayTable.append(data)
                invoiceNumberElement.val(null)
                invoiceValueElement.val(null)
                ewayBillNumberElement.val(null)

                const today = new Date();
                const day = today.getDate().toString().padStart(2, '0');
                const month = (today.getMonth() + 1).toString().padStart(2, '0');
                const year = today.getFullYear();

                const formattedDate = `${day}-${month}-${year}`;
                expiry.val(formattedDate)

                setTimeout(function () {
                    $('#deliveryBy').select2('close')
                }, 50)

                setTimeout(function () {

                    $("#invoiceNumber").focus()
                }, 100)





            }


        }
    </script>


    <script>
        function updateLREway(data) {
            const ewayTable = $("#ewayBillTable")


            for (i = 0; i < data.length; i++) {

                const rowID = i

                const appendData = `
                                                                             <tr class="border-bottom border-bottom-dashed" data-kt-element="item" data-rowid="${rowID}">
                                                                                <td class="col-lg-3 ps-0">
                                                                                    <input value="${data[i].invoiceNumber}" disabled  name="invoiceNumber" oninput="validateWholeNumber(this)" type="text" class="invoice-number form-control form-control-solid mb-2" placeholder="Invoice Number">
                                                                                </td>
                                                                                <td class="col-lg-3 ps-0">
                                                                                    <input value="${data[i].invoiceValue}" disabled  name="invoiceValue" oninput="validateNumberWithDecimals(this)" class="invoice-value form-control form-control-solid" type="text" placeholder="Invoice Value">
                                                                                </td>
                                                                                <td class="col-lg-3 ps-0">
                                                                                    <input value="${data[i].ewayBillNumber}" disabled name="ewayBillNumber" oninput="validateNumberWithDecimals(this)" class="ewaybill form-control form-control-solid" type="text" placeholder="E-Way Bill Number">
                                                                                </td>
                                                                                <td class="col-lg-3 ps-0">
                                                                                    <input value="${data[i].ewayBillExpiry}" disabled name="expiry" class="expiry form-control form-control-solid" placeholder="Set Eway Bill Expiry" id="kt_datepicker_2"/>
                                                                                </td>
                                                                                <td class="col-lg-1 pt-5 text-end">
                                                                                    <button type="button" onclick="removeEwayBill(${rowID})" class="btn btn-sm btn-icon btn-danger btn-active-light-danger" data-kt-element="add-item">
                                                                                        <i class="ki-duotone ki-trash-square fs-1">
                                                                                            <span class="path1"></span>
                                                                                            <span class="path2"></span>
                                                                                            <span class="path3"></span>
                                                                                            <span class="path4"></span>
                                                                                        </i>
                                                                                    </button>
                                                                                </td>
                                                                            </tr>
                                                                         `

                ewayTable.append(appendData)
            }
            $("#kt_modal_2").modal("show")
        }
    </script>

    <script>
        function removeEwayBill(id) {


            var rowToDelete = document.querySelector(`#eway-table tr[data-rowid="${id}"]`);
            if (rowToDelete) {

                rowToDelete.remove();

            } else {

                console.log(`Row with data-rowid="${id}" not found.`);
            }

        }
    </script>

    <script>
        function deleteLR(id) {
            Swal.fire({
                text: "Are you sure you want to delete this LR?",
                icon: "warning",
                showCancelButton: !0,
                buttonsStyling: !1,
                confirmButtonText: "Yes, delete!",
                cancelButtonText: "No, cancel",
                customClass: {
                    confirmButton: "btn fw-bold btn-danger",
                    cancelButton: "btn fw-bold btn-active-light-primary"
                }
            }).then(response => {
                if (response.isConfirmed) {
                    fetch(`/transactions/booking/lorry-reciept/delete?id=${id}`, {
                        method: "GET"
                    }).then(data => {
                        if (data.status === 200) {
                            Swal.fire({
                                text: "Successfully Deleted LR",
                                icon: "success",
                                buttonsStyling: !1,
                                confirmButtonText: "Ok, got it!",
                                customClass: {
                                    confirmButton: "btn btn-primary"
                                }
                            }).then(response => {
                                if (response.isConfirmed) {
                                    location.reload()
                                }
                            })
                        } else if (data.status === 401) {
                            showError("You Are Not Authorized To Perform This Action")
                        } else if (data.status === 400) {
                            return data.json().then(data => {
                                showError(data.message)
                            })
                        }
                    })
                }
            })

        }
    </script>

    <script>
        $("#materialHold").on("change", function () {
            if ($("#materialHold").prop("checked")) {
                $("#holdAtDiv").css("display", "block")
                $("#holdAt").prop("disabled", false)
            } else {
                $("#holdAtDiv").css("display", "none")
                $("#holdAt").prop("disabled", true)
            }

        })

        $("#holdAt").on("change", function () {
            if (!$("#holdAt").prop("checked")) {
                $("#holdAtLabel").html("At Delivery Godown")
            } else {
                $("#holdAtLabel").html("At Booking Godown")
            }
        })
    </script>
    <script>
        $(document).ready(function () {
            // Initialize the input mask with the desired format
            Inputmask("9999-9999-9999").mask("#ewayBillNumber");
        });
    </script>

    <script>
        $("#deliverySource").on("change", function () {
            if ($("#deliverySource").prop("checked")) {
                $("#deliverySourceDiv").css("display", "block");

            } else {
                $("#selectDeliverySource").val(null).select2()
                $("#deliverySourceDiv").css("display", "none");
            }
        })
        $("#bookingSource").on("change", function () {
            if ($("#bookingSource").prop("checked")) {
                $("#bookingSourceDiv").css("display", "block");

            } else {
                $("#selectBookingSource").val(null).select2()
                $("#bookingSourceDiv").css("display", "none");
            }
        })
    </script>

    <script>
        function downloadLorryReciept(id) {
            window.open(`/transactions/booking/lorry-reciepts/download?id=${id}`, "_blank")
        }
    </script>

    <%} %>