<% if(pageName==="lorryArrival" ) {%>

    <script>
        $("#lorryArrivalDate").flatpickr({
            dateFormat: "d-m-Y",
            minDate: new Date(new Date().getTime() - 5 * 24 * 60 * 60 * 1000), // 5 days ago
            maxDate: new Date(new Date().getTime() + 1 * 24 * 60 * 60 * 1000), // 1 day in the future
            defaultDate: new Date() // Set the default date to the current date
        });
    </script>

<script>
    var start = moment().subtract(29, "days");
    var end = moment();

    function cb(start, end) {
        $("#searchRange").html(start.format("D, M, Y") + " - " + end.format("D, M, Y"));
    }

    $("#searchRange").daterangepicker({
        startDate: start,
        endDate: end,
        ranges: {
            "Today": [moment(), moment()],
            "Yesterday": [moment().subtract(1, "days"), moment().subtract(1, "days")],
            "Last 7 Days": [moment().subtract(6, "days"), moment()],
            "Last 30 Days": [moment().subtract(29, "days"), moment()],
            "This Month": [moment().startOf("month"), moment().endOf("month")],
            "Last Month": [moment().subtract(1, "month").startOf("month"), moment().subtract(1, "month").endOf("month")]
        },
        locale: {
            format: "D-M-Y"
        }
    }, cb);

    cb(start, end);

    if (storedDateRange) {
        // If a stored date range is found, parse it and set it as the default value
        const parsedDateRange = JSON.parse(storedDateRange);
        $("#searchRange").val(parsedDateRange.join(' to '))
    }
</script>
<script>
    // Function to initialize DataTable
    function initializeDataTable() {
        // Set date data order
        const tableRows = table.querySelectorAll('tbody tr');

        tableRows.forEach(row => {
            const dateRow = row.querySelectorAll('td');
            const realDate = moment(dateRow[3].innerHTML, "DD MMM YYYY, LT").format(); // select date from 4th column in table
            dateRow[3].setAttribute('data-order', realDate);
        });

        // Init datatable --- more info on datatables: https://datatables.net/manual/
        datatable = $(table).DataTable({
            "info": false,
            'order': [],
            'pageLength': 10,
            'scrollX': true, // Set the height of the scrollable area (adjust as needed)
            'fixedColumns': {
                leftColumns: 2, // Number of columns to freeze on the left
            },
        });

        // Hook export buttons
        const documentTitle = 'Lorry Arrival Report';
        var buttons = new $.fn.dataTable.Buttons(table, {
            buttons: [
                {
                    extend: 'copyHtml5',
                    title: documentTitle
                },
                {
                    extend: 'excelHtml5',
                    title: documentTitle
                },
                {
                    extend: 'csvHtml5',
                    title: documentTitle
                }
            ]
        }).container().appendTo($('#kt_datatable_example_buttons'));

        // Hook dropdown menu click event to datatable export buttons
        const exportButtons = document.querySelectorAll('#kt_datatable_example_export_menu [data-kt-export]');
        exportButtons.forEach(exportButton => {
            exportButton.addEventListener('click', e => {
                e.preventDefault();

                // Get clicked export value
                const exportValue = e.target.getAttribute('data-kt-export');
                const target = document.querySelector('.dt-buttons .buttons-' + exportValue);

                // Trigger click event on hidden datatable export buttons
                target.click();
            });
        });

        // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()
        const filterSearch = document.querySelector('[data-kt-filter="search"]');
        filterSearch.addEventListener('keyup', function (e) {
            datatable.search(e.target.value).draw();
        });
    }

    // Initialize DataTable on document ready
    KTUtil.onDOMContentLoaded(function () {
        table = document.querySelector('#kt_datatable_example');
        if (table) {
            initializeDataTable();
        }
    });
</script>

    <!-- Fethcing LR Number from Challan -->
    <script>
        const challanNumberElement = $("#challanNumber")
        challanNumberElement.on("change", function () {
            const challanID = challanNumberElement.val();

            fetch(`/transactions/delivery/lorry-arrival/get-challan-details?challanID=${challanID}`, {
                method: "GET"
            }).then((data) => {
                if (data.status === 400) {
                    return data.json().then((message) => {
                        Swal.fire({
                            text: message.message,
                            icon: "error",
                            buttonsStyling: !1,
                            confirmButtonText: "Ok, got it!",
                            customClass: {
                                confirmButton: "btn btn-primary"
                            }
                        });
                    });
                } else if (data.status === 200) {
                    while (itemTableBody.firstChild) {
                        itemTableBody.removeChild(itemTableBody.firstChild);
                    }
                    return data.json().then((newData) => {
                        const vehicleNumberElement = $("#vehicleNumber")
                        vehicleNumberElement.val(newData.vehicleNumber)
                        const vehicleIDElement = $("#vehicleID")
                        vehicleIDElement.val(newData.vehicleID)
                        
                        newData.lrData.forEach((lrData, index) => {
                            
                            const itemTableBody = document.getElementById("itemTableBody");
                            const newRow = document.createElement("tr");
                            newRow.className = "border-bottom border-bottom-dashed";
                            newRow.setAttribute("data-kt-elements", "item");
                            newRow.setAttribute("data-rowid", index + 1);
                         
                            newRow.innerHTML = `
                        <td style="width : 75px">
                            <input class="form-check-input" type="checkbox" name="allPKGRecieved" checked>
                        </td>
                        <td style="width : 75px">
                            ${index + 1}
                        </td>
                        <td style="width : 250px">
                            <select disabled class="form-select  form-select-solid" data-placeholder="Select LR" name="lrNumber" id="lrNumber_${index}">
                                <option value="${lrData.lrID}">${lrData.lrNumber}</option>
                            </select>
                        </td>
                        <td style="width : 250px">
                            <input value="${lrData.consignee}" disabled type="text" class=" form-control form-control-solid" name="consignee">
                        </td>
                        <td style="width : 250px">
                            <select class="form-select  form-select-solid" data-control="select2" data-placeholder="Select LR" name="materialFor" id="materialFor${index}">
                                <option value="delivery" selected>Delivery</option>
                                <option value="transfer">Transfer</option>

                            </select>
                        </td>
                        <td style="width : 250px">
                            <input type="hidden" class="original-actual" id="originalActualWeight" value="${lrData.actualWeight}">
                            <input name="actualWeight" value="${lrData.actualWeight}" disabled type="text" class="actual-weight-input form-control form-control-solid">

                        </td>
                        <td style="width : 250px">
                            <input type="hidden" id="originalChargedWeight" class="original-charged-weight" value="${lrData.chargedWeight}">
                            <input disabled value="${lrData.chargedWeight}" type="text" class="charged-weight-input form-control form-control-solid" name="chargedWeight">
                        </td>
                        <td style="width : 250px">
                            <input type="hidden" class="originalNOP" value="${lrData.NOP}">
                            <input oninput="return allowOnlyWholeNumbers(event)" disabled value="${lrData.NOP}" type="text" class="charged-weight-input form-control form-control-solid" name="NOP">
                        </td>
                     
                    `;
                   
                            itemTableBody.appendChild(newRow);
                            $(`#materialFor${index}`).select2()
                        });
                    });
                } else if (data.status === 401) {
                    Swal.fire({
                        text: "You are not authorized to perform this action",
                        icon: "error",
                        buttonsStyling: !1,
                        confirmButtonText: "Ok, got it!",
                        customClass: {
                            confirmButton: "btn btn-primary"
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Additional actions upon confirmation, if needed
                        }
                    });
                }
            });
        });

    </script>

    <script>
        const itemTableBody = document.getElementById("itemTableBody");

        itemTableBody.addEventListener("input", function (event) {
  if (event.target && event.target.tagName === "INPUT" && event.target.name === "NOP") {
    const originalNOPInput = event.target.parentNode.querySelector('.originalNOP');
    const NOPValue = parseFloat(event.target.value);
    const originalNOPValue = parseFloat(originalNOPInput.value);

    const actualWeightElement = event.target.closest('tr').querySelector('.actual-weight-input');
    const originalActualWeight = event.target.closest('tr').querySelector('.original-actual').value

    if (NOPValue > originalNOPValue) {
        
      event.target.value = originalNOPValue;
      actualWeightElement.value = originalActualWeight;
    } else {
      actualWeightElement.value = (originalActualWeight / originalNOPValue) * NOPValue
    }
  }
});



        itemTableBody.addEventListener("input", function (event) {
            if (event.target && event.target.tagName === "INPUT" && event.target.name === "chargedWeight") {
                const originalChargedWeight = event.target.parentNode.querySelector('.originalChargedWeight');
                const chargedWeight = parseFloat(event.target.value);
                const originalChargedWeightValue = parseFloat(originalChargedWeight.value);


                if (chargedWeight > originalChargedWeightValue) {

                    event.target.value = originalChargedWeightValue
                }
            }
        });

        itemTableBody.addEventListener("input", function (event) {
            // Check if the event target is an "input" element with the name "NOP"
            if (event.target && event.target.tagName === "INPUT" && event.target.name === "NOP") {
                // Get the corresponding "originalNOP" input in the same row
                const originalNOPInput = event.target.parentNode.querySelector('.originalNOP');

                // Convert the input values to numbers (assuming they are numeric)
                const NOPValue = parseFloat(event.target.value);
                const originalNOPValue = parseFloat(originalNOPInput.value);

                // Check if NOP is greater than originalNOP
                if (NOPValue > originalNOPValue) {
                    // Notify the user or take appropriate action (e.g., prevent input)
                    alert("NOP cannot be greater than originalNOP.");
                    // Reset the "NOP" input value to originalNOP value
                    event.target.value = originalNOPValue;
                }
            }
        });

        itemTableBody.addEventListener("input", function (event) {
            // Check if the event target is an "input" element with the name "NOP"
            if (event.target && event.target.tagName === "INPUT" && event.target.name === "chargedWeight") {
                // Get the corresponding "originalNOP" input in the same row
                const originalNOPInput = event.target.parentNode.querySelector('.original-charged-weight');

                // Convert the input values to numbers (assuming they are numeric)
                const NOPValue = parseFloat(event.target.value);
                const originalNOPValue = parseFloat(originalNOPInput.value);

                // Check if NOP is greater than originalNOP
                if (NOPValue > originalNOPValue) {
                    // Notify the user or take appropriate action (e.g., prevent input)
                    
                    // Reset the "NOP" input value to originalNOP value
                    event.target.value = originalNOPValue;
                }
            }
        });

        // Add an event listener to the container element for checkbox changes
        itemTableBody.addEventListener("change", function (event) {
            // Check if the event target is a checkbox element with the name "allPKGRecieved"
            if (event.target && event.target.tagName === "INPUT" && event.target.name === "allPKGRecieved") {
                // Get the corresponding "NOP" input in the same row
                const NOPInput = event.target.closest("tr").querySelector('input[name="NOP"]');
                const actualWeightInput = event.target.closest("tr").querySelector('input[name="actualWeight"]');
                const chargedWeightInput = event.target.closest("tr").querySelector('input[name="chargedWeight"]')
                chargedWeightInput.disabled = false;

                // Disable the "NOP" input if the checkbox is checked, enable it otherwise
                NOPInput.disabled = event.target.checked;

                // If the checkbox is checked, reset the "NOP" input value to originalNOP value
                if (event.target.checked) {

                    const originalNOPInput = NOPInput.closest("tr").querySelector('.originalNOP');
                    const originalActualWeightInput = event.target.closest("tr").querySelector('#originalActualWeight');
                    const originalActualWeightValue = parseFloat(originalActualWeightInput.value);
                    actualWeightInput.value = originalActualWeightValue;
                    const originalNOPValue = parseFloat(originalNOPInput.value);
                    NOPInput.value = originalNOPValue;
                    const originalChargedWeightInput = event.target.closest("tr").querySelector('#originalChargedWeight');
                    const originalChargedWeightValue = parseFloat(originalChargedWeightInput.value);
                    chargedWeightInput.value = originalChargedWeightValue;



                }
            }
        });

    </script>


    <!--Fetching LR Details-->
    <script>
        var consigneeElement = $("#consignee")
        var goodsDescriptionElement = $("#goodsDescription")
        var chargedWeightElement = $("#chargedWeight")
        var PKGElement = $("#PKG")
        var expectedNOP = $("#expectedNOP")
        selectLRElement.on("change", function () {
            var lrID = selectLRElement.val()
            var challanNumber = challanNumberElement.val()
            fetch(`/transactions/delivery/lorry-arrival/get-lr-detail?lrID=${lrID}&challanNumber=${challanNumber}`, {
                method: "GET"
            }).then((data) => {
                if (data.status === 400) {

                    return data.json().then((message) => {
                        Swal.fire({
                            text: message.message,
                            icon: "error",
                            buttonsStyling: !1,
                            confirmButtonText: "Ok, got it!",
                            customClass: {
                                confirmButton: "btn btn-primary"
                            }
                        })
                    })

                } else if (data.status === 200) {

                    return data.json().then((info) => {
                        consigneeElement.val(info.consigneeName)
                        goodsDescriptionElement.val(info.goodsDescription)
                        chargedWeightElement.val(info.chargedWeight)
                        PKGElement.val(info.PKG)
                        expectedNOP.val(info.PKG)
                        PKGElement.prop("disabled", false)
                    })

                } else if (data.status === 401) {
                    Swal.fire({
                        text: "You are not authorized to perform this action",
                        icon: "error",
                        buttonsStyling: !1,
                        confirmButtonText: "Ok, got it!",
                        customClass: {
                            confirmButton: "btn btn-primary"
                        }
                    }).then((data) => {
                        if (data.isConfirmed) {
                            i.setAttribute("data-kt-indicator", "off")
                            i.disabled = 0
                            n.hide()
                            e.reset()
                        }
                    })
                }
            })
        })
    </script>

    <!--Making Sure that PKG recieved is not moe than PKG Sent-->
    <script>
        PKGElement.on("input", function () {
            if (parseInt(PKGElement.val()) > parseInt(expectedNOP.val())) {
                PKGElement.val(expectedNOP.val())
            }
        })
    </script>
    <script>

        function createLorryArrival() {
            
            const vehicleID = $("#vehicleID")
            const vehicleNumberElement = $("#vehicleNumber")
            if (challanNumberElement.val() === "") {
                showError("Please Select Challan Number")
            } else if (vehicleID.val() === "") {
                showError("Please Refresh Page & Select Challan Number Again")
            } else if (vehicleNumberElement.val() === "") {
                showError("Please Refresh Page & Select Challan Number Again")
            } else {
                const NOPInputs = document.querySelectorAll('input[name="NOP"]');
                let totalNOP = 0

                NOPInputs.forEach(function (NOPInput) {
                    const NOPValue = parseFloat(NOPInput.value);
                    if (!isNaN(NOPValue)) {
                        totalNOP += NOPValue;
                    }
                })

                if (totalNOP >= 1) {
                    $("#lorryArrivalSubmit").attr("data-kt-indicator", "on").prop("disabled", true);
                    $("#modalCloseBTN").prop("disabled", true);
                    const form = document.getElementById("lorryArrivalForm");
                    // Enable disabled inputs and selects
                    const disabledInputs = form.querySelectorAll("input[disabled], select[disabled]");
                    for (const input of disabledInputs) {
                        input.removeAttribute("disabled");
                    }

                    // Serialize the form data
                    const formData = new FormData(form);

                    // Re-disable previously disabled inputs and selects
                    for (const input of disabledInputs) {
                        input.setAttribute("disabled", "disabled");
                    }

                    // Create a URLSearchParams object and add form data to it
                    const data = new URLSearchParams();
                    for (const pair of formData) {
                        data.append(pair[0], pair[1]);
                    }

                    // Send the form data to the server
                    fetch("/transactions/delivery/lorry-arrival/new", {
                        method: "POST",
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded'
                        },
                        body: data
                    }).then((data) => {
                        if (data.status === 400) {

                            return data.json().then((message) => {
                                Swal.fire({
                                    text: message.message,
                                    icon: "error",
                                    buttonsStyling: !1,
                                    confirmButtonText: "Ok, got it!",
                                    customClass: {
                                        confirmButton: "btn btn-primary"
                                    }
                                }).then(response=> {
                                    if(response.isConfirmed) {
                                        $("#lorryArrivalSubmit").attr("data-kt-indicator", "off").prop("disabled", false);
                                        $("#modalCloseBTN").prop("disabled", false);
                                    }
                                })
                            })

                        } else if (data.status === 200) {
                            Swal.fire({
                                text: "Lorry Arrival Created Successfully",
                                icon: "success",
                                buttonsStyling: !1,
                                confirmButtonText: "Ok, got it!",
                                customClass: {
                                    confirmButton: "btn btn-primary"
                                }
                            }).then((response) => {
                                if (response.isConfirmed) {
                                    location.reload()
                                }
                            })
                        } else if (data.status === 401) {
                            Swal.fire({
                                text: "You are not authorized to perform this action",
                                icon: "error",
                                buttonsStyling: !1,
                                confirmButtonText: "Ok, got it!",
                                customClass: {
                                    confirmButton: "btn btn-primary"
                                }
                            }).then((data) => {
                                if (data.isConfirmed) {
                                    $("#lorryArrivalSubmit").attr("data-kt-indicator", "off").prop("disabled", false);
                                    $("#modalCloseBTN").prop("disabled", false);
                                }
                            })
                        } else if(data.status === 500) {
                            Swal.fire({
                                text: "Something Went Wrong",
                                icon: "error",
                                buttonsStyling: !1,
                                confirmButtonText: "Ok, got it!",
                                customClass: {
                                    confirmButton: "btn btn-primary"
                                }
                            }).then((data) => {
                                if (data.isConfirmed) {
                                    location.reload()
                                }
                            })
                        }
                    })
                } else {
                    showError("Please Add Atleast 1 Package")
                }

            }
        }

    </script>






    <script>
        function showError(message) {
            Swal.fire({
                text: message,
                icon: "error",
                buttonsStyling: !1,
                confirmButtonText: "Ok, got it!",
                customClass: {
                    confirmButton: "btn btn-primary"
                }
            })
        }
    </script>

    <script>
        function allowOnlyWholeNumbers(event) {
            const input = event.target;

            // Regular expression to match only numeric characters (0-9)
            const regex = /^[0-9]+$/;

            // Check if the input value contains any non-numeric characters
            if (!regex.test(input.value)) {
                // Prevent the input of non-numeric characters
                event.preventDefault();

                // Remove any non-numeric characters immediately
                input.value = input.value.replace(/[^0-9]/g, '');
            }
        }
    </script>

    <script>
        function addLorryArrival() {
            $("#itemTableBody").empty()
            $("#lorryArrivalForm").trigger("reset")
            $("#challanNumber").prop("disabled", false);
            $("#challanNumber option[data-id='new']").remove();
            $("#title").html("Add New Lorry Arrival")
            $("#lorryArrivalSubmit").show()
            $("#lorryArrivalUpdate").hide()
            $("#newArrivalNumberDiv").css("display", "block")
            $("#editArrivalNumberDiv").css("display", "none")
            const today = new Date();
            const day = today.getDate().toString().padStart(2, '0');
            const month = (today.getMonth() + 1).toString().padStart(2, '0');
            const year = today.getFullYear();

            const formattedDate = `${day}-${month}-${year}`;
            $("#lorryArrivalDate").val(formattedDate);
            setTimeout(function(){ 
                $("#arrivalNumber").focus()
            }, 200)
        }
    </script>

    <script>
        function editLorryArrival(id) {
            $("#lorryArrivalForm").trigger("reset")
            $("#itemTableBody").empty()
            $("#newArrivalNumberDiv").css("display", "none")
            $("#editArrivalNumberDiv").css("display", "block")
            fetch(`/transactions/delivery/lorry-arrival/get-arrival-details?id=${id}`, {
                method : "GET"
            }).then(response=> {
                if(response.status === 200) {
                    return response.json().then(newData=> {
                        const data = newData.laDATA
                        const newOption = `<option selected value="${data._id}"> ${data.number} </option>`
                        $("#arrivalNumber").append(newOption).prop("disabled", true).select2()
                        $("#lorryArrivalDate").val(data.date)
                        
                        //setting challan number in arrival edit form
                        const option = `<option data-id="new" selected value="${data.challanNumber._id}"> ${data.challanNumber.number} </option>`
                        $("#challanNumber").append(option)
                        $("#challanNumber").prop("disabled", true)
                        $("#challanNumber").select2()
                        $("#vehicleNumber").val(data.vehicle.number)
                        $("#vehicleNumber").prop("disabled", true)

                        addNewMaterialRow(newData)
                    })
                } else if(response.status === 400) {
                    return response.json().then(data=> {
                        showError(data.message)
                    })
                } else if(response.status === 401) {
                    showError("You Are Not Authorized To Perform This Action")
                }
            })
        }
    </script>

    <script>
        function addNewMaterialRow(newData) {
     
            newData.laDATA.material.forEach((data, index)=> {
     const filtered = newData.challanDATA.materialFound.find(element=> element.lrNumber.toString() === data.lrNumber._id.toString())
                const itemTableBody = document.getElementById("itemTableBody");
                            const newRow = document.createElement("tr");
                            newRow.className = "border-bottom border-bottom-dashed";
                            newRow.setAttribute("data-kt-elements", "item");
                            newRow.setAttribute("data-rowid", index + 1);
                            
                            newRow.innerHTML = `
                            
                        <td style="width : 75px">
                            <input class="form-check-input" type="checkbox" name="allPKGRecieved" ${newData.challanDATA.material[index].qty === data.qty ? 'checked' : ''}>

                        </td>
                        <td style="width : 75px">
                            ${index + 1}
                        </td>
                        <td style="width : 250px">
                         <select disabled class="form-select form-select-solid" name="lrNumber" id="lrNumber${index}">
                            <option selected value="${data.lrNumber._id}">${data.lrNumber.lrNumber}</option>
                            </select>
                        </td>
                        <td style="width : 250px">
                            <input value="${data.lrNumber.consigneeName}" disabled type="text" class=" form-control form-control-solid" name="consignee">
                        </td>
                        <td style="width : 250px">
                            <select class="form-select form-select-solid" data-control="select2" data-placeholder="Select LR" name="materialFor" id="materialFor${index}">
                                <option value="delivery" ${data.transfer === false ? 'selected' : ''}>Delivery</option>
                                <option value="transfer" ${data.transfer === true ? 'selected' : ''}>Transfer</option>

                            </select>
                        </td>
                        <td style="width : 250px">
                            
                            ${filtered ? `<input type="hidden" class="original-actual" value="${newData.challanDATA.material[index].actualWeight - filtered.actualWeight}">` : `<input type="hidden" class="original-actual" value="${newData.challanDATA.material[index].actualWeight}">`}
                              
                                    <input type="hidden" class="original-actual" value="${newData.challanDATA.material[index].actualWeight}">
                                  
                            <input ${newData.challanDATA.material[index].qty === data.qty ? 'disabled' : ''} name="actualWeight" value="${data.actualWeight}" type="text" class="actual-weight-input form-control form-control-solid">

                        </td>
                        <td style="width : 250px">
                            ${filtered? `<input type="hidden" id="originalChargedWeight" class="original-charged-weight" value="${newData.challanDATA.material[index].chargedWeight - filtered.chargedWeight}">` : `<input type="hidden" id="originalChargedWeight" class="original-charged-weight" value="${newData.challanDATA.material[index].chargedWeight}">`}
                            <input ${newData.challanDATA.material[index].qty === data.qty ? 'disabled' : ''} value="${data.chargedWeight}" type="text" class="charged-weight-input form-control form-control-solid" name="chargedWeight">
                        </td>
                        <td style="width : 250px">

                            ${filtered ? `<input type="hidden" class="originalNOP" value="${newData.challanDATA.material[index].qty - filtered.qty}">` : `<input type="hidden" class="originalNOP" value="${newData.challanDATA.material[index].qty}">`}
                            <input ${newData.challanDATA.material[index].qty === data.qty ? 'disabled' : ''} oninput="return allowOnlyWholeNumbers(event)" value="${data.qty}" type="text" class="NOPinput form-control form-control-solid" name="NOP">
                        </td>
                     `
                     
                     itemTableBody.appendChild(newRow);
                     $(`#materialFor${index}`).select2()
                     $(`lrNumber${index}`).select2()
                     
                        
            })
            
            $("#title").html("Edit Lorry Arrival")
            $("#lorryArrivalSubmit").hide()
            $("#lorryArrivalUpdate").show()
            $("#kt_modal_2").modal("show")
        }
    </script>

    <script>
        function updateLorryArrival() {
            const vehicleID = $("#vehicleID")
            const vehicleNumberElement = $("#vehicleNumber")
            if (challanNumberElement.val() === "") {
                showError("Please Select Challan Number")
            }  else {
                const NOPInputs = document.querySelectorAll('input[name="NOP"]');
                let totalNOP = 0

                NOPInputs.forEach(function (NOPInput) {
                    const NOPValue = parseFloat(NOPInput.value);
                    if (!isNaN(NOPValue)) {
                        totalNOP += NOPValue;
                    }
                })

                if (totalNOP >= 1) {
                    $("#lorryArrivalUpdate").attr("data-kt-indicator", "on").prop("disabled", true);
                    $("#modalCloseBTN").prop("disabled", true);
                    const form = document.getElementById("lorryArrivalForm");
                    // Enable disabled inputs and selects
                    const disabledInputs = form.querySelectorAll("input[disabled], select[disabled]");
                    for (const input of disabledInputs) {
                        input.removeAttribute("disabled");
                    }

                    // Serialize the form data
                    const formData = new FormData(form);

                    // Re-disable previously disabled inputs and selects
                    for (const input of disabledInputs) {
                        input.setAttribute("disabled", "disabled");
                    }

                    // Create a URLSearchParams object and add form data to it
                    const data = new URLSearchParams();
                    for (const pair of formData) {
                        data.append(pair[0], pair[1]);
                    }

                    // Send the form data to the server
                    fetch("/transactions/delivery/lorry-arrival/update", {
                        method: "POST",
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded'
                        },
                        body: data
                    }).then((data) => {
                        if (data.status === 400) {

                            return data.json().then((message) => {
                                Swal.fire({
                                    text: message.message,
                                    icon: "error",
                                    buttonsStyling: !1,
                                    confirmButtonText: "Ok, got it!",
                                    customClass: {
                                        confirmButton: "btn btn-primary"
                                    }
                                }).then(response=> {
                                    if(response.isConfirmed) {
                                        $("#lorryArrivalUpdate").attr("data-kt-indicator", "off").prop("disabled", false);
                                        $("#modalCloseBTN").prop("disabled", false);
                                    }
                                })
                            })

                        } else if (data.status === 200) {
                            Swal.fire({
                                text: "Lorry Arrival Updated Successfully",
                                icon: "success",
                                buttonsStyling: !1,
                                confirmButtonText: "Ok, got it!",
                                customClass: {
                                    confirmButton: "btn btn-primary"
                                }
                            }).then((response) => {
                                if (response.isConfirmed) {
                                   location.reload()
                                }
                            })
                        } else if (data.status === 401) {
                            Swal.fire({
                                text: "You are not authorized to perform this action",
                                icon: "error",
                                buttonsStyling: !1,
                                confirmButtonText: "Ok, got it!",
                                customClass: {
                                    confirmButton: "btn btn-primary"
                                }
                            }).then((data) => {
                                if (data.isConfirmed) {
                                   $("#lorryArrivalUpdate").attr("data-kt-indicator", "off").prop("disabled", false);
                                   $("#modalCloseBTN").prop("disabled", false);
                                }
                            })
                        } else if(data.status === 500) {
                            Swal.fire({
                                text: "Something Went Wrong",
                                icon: "error",
                                buttonsStyling: !1,
                                confirmButtonText: "Ok, got it!",
                                customClass: {
                                    confirmButton: "btn btn-primary"
                                }
                            }).then((data) => {
                                if (data.isConfirmed) {
                                    location.reload()
                                }
                            })
                        }
                    })
                } else {
                    showError("Please Add Atleast 1 Package")
                }

            }
        }
    </script>
    <script>
        function deleteLorryArrival(id) {
            Swal.fire({
            text: "Are you sure you want to delete this Lorry Arrival?",
            icon: "warning",
            showCancelButton: !0,
            buttonsStyling: !1,
            confirmButtonText: "Yes, delete!",
            cancelButtonText: "No, cancel",
            customClass: {
                confirmButton: "btn fw-bold btn-danger",
                cancelButton: "btn fw-bold btn-active-light-primary"
            }
        }).then(response => {
            if (response.isConfirmed) {
                // Send the form data to the server

                fetch(`/transactions/booking/lorry-arrival/delete?id=${id}`, {
                    method: "GET"
                }).then((data) => {
                    if (data.status === 400) {

                        return data.json().then((message) => {
                            Swal.fire({
                                text: message.message,
                                icon: "error",
                                buttonsStyling: !1,
                                confirmButtonText: "Ok, got it!",
                                customClass: {
                                    confirmButton: "btn btn-primary"
                                }
                            })
                        })

                    } else if (data.status === 200) {
                        Swal.fire({
                            text: "Lorry Arrival Deleted Successfully",
                            icon: "success",
                            buttonsStyling: !1,
                            confirmButtonText: "Ok, got it!",
                            customClass: {
                                confirmButton: "btn btn-primary"
                            }
                        }).then((response) => {
                            if (response.isConfirmed) {
                                location.reload()
                            }
                        })
                    } else if (data.status === 401) {
                        Swal.fire({
                            text: "You are not authorized to perform this action",
                            icon: "error",
                            buttonsStyling: !1,
                            confirmButtonText: "Ok, got it!",
                            customClass: {
                                confirmButton: "btn btn-primary"
                            }
                        }).then((data) => {
                            if (data.isConfirmed) {
                                i.setAttribute("data-kt-indicator", "off")
                                i.disabled = 0
                                n.hide()
                                e.reset()
                            }
                        })
                    }
                })
            }
        })

        }
    </script>
    
    <%} %>