<% if(pageName==="freightMemo" ) {%>
    <script>
        $("#fmDate").flatpickr({
            dateFormat: "d-m-Y",
            minDate: new Date(new Date().getTime() - 5 * 24 * 60 * 60 * 1000), // 5 days ago
            maxDate: new Date(new Date().getTime() + 1 * 24 * 60 * 60 * 1000), // 1 day in the future
        });
    </script>
    <script>
        // Function to initialize DataTable
        function initializeDataTable() {
            // Set date data order
            const tableRows = table.querySelectorAll('tbody tr');

            tableRows.forEach(row => {
                const dateRow = row.querySelectorAll('td');
                const realDate = moment(dateRow[3].innerHTML, "DD MMM YYYY, LT").format(); // select date from 4th column in table
                dateRow[3].setAttribute('data-order', realDate);
            });

            // Init datatable --- more info on datatables: https://datatables.net/manual/
            datatable = $(table).DataTable({
                "info": true,
                'order': [],
                'pageLength': 10,
                'scrollX': true, // Set the height of the scrollable area (adjust as needed)
                'fixedColumns': {
                    leftColumns: 2, // Number of columns to freeze on the left
                },
            });

            // Hook export buttons
            const documentTitle = 'Challan Report';
            var buttons = new $.fn.dataTable.Buttons(table, {
                buttons: [
                    {
                        extend: 'copyHtml5',
                        title: documentTitle
                    },
                    {
                        extend: 'excelHtml5',
                        title: documentTitle
                    },
                    {
                        extend: 'csvHtml5',
                        title: documentTitle
                    }
                ]
            }).container().appendTo($('#kt_datatable_example_buttons'));

            // Hook dropdown menu click event to datatable export buttons
            const exportButtons = document.querySelectorAll('#kt_datatable_example_export_menu [data-kt-export]');
            exportButtons.forEach(exportButton => {
                exportButton.addEventListener('click', e => {
                    e.preventDefault();

                    // Get clicked export value
                    const exportValue = e.target.getAttribute('data-kt-export');
                    const target = document.querySelector('.dt-buttons .buttons-' + exportValue);

                    // Trigger click event on hidden datatable export buttons
                    target.click();
                });
            });

            // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()
            const filterSearch = document.querySelector('[data-kt-filter="search"]');
            filterSearch.addEventListener('keyup', function (e) {
                datatable.search(e.target.value).draw();
            });
        }

        // Initialize DataTable on document ready
        KTUtil.onDOMContentLoaded(function () {
            table = document.querySelector('#kt_datatable_example');
            if (table) {
                initializeDataTable();
            }
        });
    </script>
    <script>
        const today = new Date();
        const day = today.getDate().toString().padStart(2, '0');
        const month = (today.getMonth() + 1).toString().padStart(2, '0');
        const year = today.getFullYear();

        const formattedDate = `${day}-${month}-${year}`;
    </script>
    <script>
        function addNewFM() {
            localStorage.setItem("othersAdd", JSON.stringify([]))
            localStorage.setItem("othersSub", JSON.stringify([]))
            $("#selectChallan").css("display", "block")
            $("#displayChallan").css("display", "none")
            $("#fmNumber").attr("type", "number").prop("disabled", false)
            $("#fmForm").trigger("reset")
            $("#fmSubmit").css("display", "block")
            $("#fmUpdate").css("display", "none")
            $("#rateON").select2()

            $("#fmDate").val(formattedDate);
            $("#title").text("Add New Freight Memo")
            setTimeout(function () {
                $("#fmNumber").focus()
            }, 200)
        }
    </script>
    <script>
        $("#challan").on("change", function () {

            fetch("/transactions/accounts/freight-memo/get-challan-details", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    id: $(this).val()
                })
            }).then((res) => {
                return res.json().then((data) => {
                    $("#rateON").select2('close').blur();
                    const info = data.data
                    $("#from").val(info.from.name)
                    $("#to").val(info.to.name)
                    $("#vehicleNumber").val(info.vehicle.number)
                    $("#owner").val(info.vehicle.owner.name)

                    if (!info.vehicle.broker) {
                        $("#accountTO").find("option[value='owner']").prop("selected", true).trigger("change")
                        // Scroll down the modal body completely
                        $('#kt_modal_2 .modal-body').scrollTop($('#kt_modal_2 .modal-body')[0].scrollHeight);
                        setTimeout(function () {

                            $("#rateON").focus()
                        }, 200)
                    } else {
                        $("#broker").val(info.vehicle.broker.name)
                        $("#accountTO").prop("disabled", false)
                        setTimeout(function () {

                            $("#accountTO").focus()
                        }, 200)

                    }

                    //calculating total actual weight, charge weight, pkg
                    let totalActualWeight = 0
                    let totalChargedWeight = 0
                    let totalPkg = 0

                    info.material.forEach((item) => {
                        totalActualWeight += item.actualWeight
                        totalChargedWeight += item.chargedWeight
                        totalPkg += item.qty
                    })

                    $("#actualWeight").val(totalActualWeight)
                    $("#chargedWeight").val(totalChargedWeight)
                    $("#pkg").val(totalPkg)



                })
            })
        })
    </script>
    <script>
        $("#accountTO").on("change", function () {
            // Scroll down the modal body completely
            $('#kt_modal_2 .modal-body').scrollTop($('#kt_modal_2 .modal-body')[0].scrollHeight);

        })
    </script>
    <script>
        $("#rate").on("input", function () {
            calculateFreight()
        })
        $("#rateON").on("change", function () {
            setTimeout(function () {
                calculateFreight()
            }, 100)
        })
    </script>
    <script>
        function calculateFreight() {
            const rate = $("#rate").val()
            const rateON = $("#rateON").val()
            const pkg = $("#pkg").val()
            const actualWeight = $("#actualWeight").val()
            const chargedWeight = $("#chargedWeight").val()

            if (rateON === "pkg") {
                $("#freight").val(rate * pkg)
            } else if (rateON === "actualWeight") {
                $("#freight").val(rate * actualWeight)
            } else if (rateON === "chargedWeight") {
                $("#freight").val(rate * chargedWeight)
            } else if (rateON === "ftl") {
                $("#freight").val(rate)
            }
        }
    </script>
    <script>
        $("#cashStatus").on("change", function () {
            if ($(this).val() === "paid") {
                //enabling all inputs and select elements in div with id advanceDetails
                $("#advanceCash").find("input, select:not(:last)").prop("disabled", false)

            } else {
                //disabling all inputs and select elements in div with id advanceDetails
                $("#advanceCash").find("input, select").prop("disabled", true)
                //resetting all inputs and select elements in div with id advanceDetails
                $("#advanceCash").find("input:not(:last)").val(0).prop("disabled", false)
                $("#advanceCash").find("select:not(:last)").val(null).select2()
                $(this).prop("disabled", false)

            }
        })

        $("#bankStatus").on("change", function () {
            if ($(this).val() === "paid") {
                //enabling all inputs and select elements in div with id advanceDetails
                $("#advanceBank").find("input, select:not(:last)").prop("disabled", false)

            } else {
                //disabling all inputs and select elements in div with id advanceDetails
                $("#advanceBank").find("input, select").prop("disabled", true)
                //resetting all inputs and select elements in div with id advanceDetails
                $("#advanceBank").find("input:not(:last)").val(0).prop("disabled", false)
                $("#advanceBank").find("select:not(:last)").val(null).select2()
                $(this).prop("disabled", false)

            }
        })

        $("#dieselStatus").on("change", function () {
            if ($(this).val() === "paid") {
                //enabling all inputs and select elements in div with id advanceDetails
                $("#advanceDiesel").find("input, select:not(:last)").prop("disabled", false)

            } else {
                //disabling all inputs and select elements in div with id advanceDetails
                $("#advanceDiesel").find("input, select").prop("disabled", true)
                //resetting all inputs and select elements in div with id advanceDetails
                $("#advanceDiesel").find("input:not(:last)").val(0).prop("disabled", false)
                $("#advanceDiesel").find("select:not(:last)").val(null).select2()
                $(this).prop("disabled", false)

            }
        })
    </script>
    <script>
        function saveAdvanceDetails() {
            if (($("#cashStatus").val() == "paid" && ($("#cashAmount").val() == "" || $("#cashLedger").val() == "")) || ($("#bankStatus").val() == "paid" && ($("#bankAmount").val() == "" || $("#bankLedger").val() == "")) || ($("#dieselStatus").val() == "paid" && ($("#dieselAmount").val() == "" || $("#dieselLedger").val() == ""))) {
                showError("All fields are required")

            } else {
                const totalAdvance = parseFloat($("#cashAmount").val()) + parseFloat($("#bankAmount").val()) + parseFloat($("#dieselAmount").val())
                $("#advance").val(totalAdvance)
                $("#balance").val(parseFloat($("#netFreight").val() - parseFloat($("#advance").val())))
                const cashAdvanceAmount = $("#cashAmount").val()
                const cashAdvanceLedger = $("#cashLedger").val()
                const cashAdvanceStatus = $("#cashStatus").val()
                const cashAdvanceDate = $("#cashDate").val()

                const chequeAdvanceAmount = $("#bankAmount").val()
                const chequeAdvanceLedger = $("#bankLedger").val()
                const chequeAdvanceStatus = $("#bankStatus").val()
                const chequeAdvanceDate = $("#bankDate").val()

                const dieselAdvanceAmount = $("#dieselAmount").val()
                const dieselAdvanceLedger = $("#dieselLedger").val()
                const dieselAdvanceStatus = $("#dieselStatus").val()
                const dieselAdvanceDate = $("#dieselDate").val()
                const newOBJ = {
                    cashAdvanceAmount,
                    cashAdvanceLedger,
                    cashAdvanceStatus,
                    cashAdvanceDate,
                    chequeAdvanceAmount,
                    chequeAdvanceLedger,
                    chequeAdvanceStatus,
                    chequeAdvanceDate,
                    dieselAdvanceAmount,
                    dieselAdvanceLedger,
                    dieselAdvanceStatus,
                    dieselAdvanceDate
                }
                localStorage.setItem("advanceDetails", JSON.stringify(newOBJ))

                $("#kt_modal_stacked_2").modal("hide")
            }

        }
    </script>
    <script>
        function editAdvanceDetails() {
            const data = JSON.parse(localStorage.getItem("advanceDetails"))
            $("#cashAmount").val(data.cashAdvanceAmount)
            $("#cashLedger").val(data.cashAdvanceLedger).select2()
            $("#cashStatus").val(data.cashAdvanceStatus).select2()
            $("#cashDate").val(data.cashAdvanceDate)


            $("#bankAmount").val(data.chequeAdvanceAmount)
            $("#bankLedger").val(data.chequeAdvanceLedger).select2()
            $("#bankStatus").val(data.chequeAdvanceStatus).select2()
            $("#bankDate").val(data.chequeAdvanceDate)

            $("#dieselAmount").val(data.dieselAdvanceAmount)
            $("#dieselLedger").val(data.dieselAdvanceLedger).select2()
            $("#dieselStatus").val(data.dieselAdvanceStatus).select2()
            $("#dieselDate").val(data.dieselAdvanceDate)

        }
    </script>
    <script>
        $("#rate, #hamali, #othersAdd, #othersSub, #mamul, #unloading, #tdsP").on("input", function () {
            calculateTDS()
            calculateNetValues()
        })
        function calculateTDS() {
            const freight = (parseFloat($("#freight").val()) || 0) +
                (parseFloat($("#hamali").val()) || 0) +
                (parseFloat($("#othersAddAmtTotal").val()) || 0) -
                (parseFloat($("#othersSubAmtTotal").val()) || 0) -
                (parseFloat($("#mamul").val()) || 0) -
                (parseFloat($("#unloading").val()) || 0);

            const tdsValue = (freight * parseFloat($("#tdsP").val())) / 100
            $("#tds").val(tdsValue)
        }

        function calculateNetValues() {
            const netFreight = (parseFloat($("#freight").val()) || 0) +
                (parseFloat($("#hamali").val()) || 0) +
                (parseFloat($("#othersAddAmtTotal").val()) || 0) -
                (parseFloat($("#othersSubAmtTotal").val()) || 0) -
                (parseFloat($("#mamul").val()) || 0) -
                (parseFloat($("#unloading").val()) || 0) -
                (parseFloat($("#tds").val()) || 0);

            $("#netFreight").val(netFreight)
            $("#balance").val(parseFloat($("#netFreight").val() - parseFloat($("#advance").val())))
        }
    </script>
    <script>
        $(document).ready(function () {
            $(document).on('change', '.select-expense', function () {
                var parent = $(this).closest('.row');
                var input = parent.find('.expense-amount');
                if ($(this).val() !== '') {
                    input.prop('disabled', false).val(0)
                } else {
                    input.prop('disabled', true).val(0)
                }
            });
        });

    </script>

    <script>
        function addRepeaterList(forV) {
            let div = $("#repeaterAdd")
            let length = $("#repeaterAdd .newRow").length
            let id = 3
            let text = "Add"
            if (forV === "sub") {
                div = $("#repeaterSub")
                length = $("#repeaterSub .newRow").length
                id = 4
                text = "Sub"
            }
            const newRow = `
            <div class="form-group newRow" data-rowid="${length}">
                                    <div class="form-group row mb-5">
                                        <div class="col-lg-5">
                                            <label class="form-label">Select Expense Type</label>
                                            <select name="others${text}Ledger"
                                                class="form-select form-select-solid select-expense" data-control="select2"
                                                data-dropdown-parent="#kt_modal_stacked_${id}"
                                                data-placeholder="Select Expense Type">
                                                <option></option>
                                                <%directExpenses.forEach((data)=> {%> 
                                                    <option value="<%=data._id%>"><%=data.name%></option>
                                                    <%}) %>
                                            </select>
                                        </div>
                                        <div class="col-lg-5">
                                            <label class="form-label">Amount</label>
                                            <input oninput="validateNumberWithDecimals(this)" value="0" name="others${text}Amt"
                                                class="form-control form-control-solid expense-amount" disabled type="text"
                                                placeholder="Amount" />
                                        </div>
    
                                        <div class="col-lg-2">
                                            <button onclick="deleteRepeaterList('${forV}', '${length}')"
                                                class="btn btn-flex btn-sm btn-light-danger mt-3 mt-md-9">
                                                <i class="ki-duotone ki-trash fs-3">
                                                    <span class="path1"></span>
                                                    <span class="path2"></span>
                                                    <span class="path3"></span>
                                                    <span class="path4"></span>
                                                    <span class="path5"></span></i>
    
                                            </button>
                                        </div>
                                    </div>
                                </div>
            `
            div.append(newRow)
            if (forV == "sub") {
                setTimeout(function () {
                    $(`#repeaterSub .newRow[data-rowid="${length}"] select`).select2()
                }, 100)
            } else {
                setTimeout(function () {
                    $(`#repeaterAdd .newRow[data-rowid="${length}"] select`).select2()
                }, 100)
            }

        }
    </script>

    <script>
        function deleteRepeaterList(forV, id) {
            let div = $("#repeaterAdd")
            if (forV == "add") {
                $(`#repeaterAdd .newRow[data-rowid="${id}"]`).remove()
            } else {
                $(`#repeaterSub .newRow[data-rowid="${id}"]`).remove()
            }
        }
    </script>

    <script>
        function saveOthersSub() {
            let total = 0
            $("#kt_modal_stacked_4 .expense-amount").each(function () {
                if ($(this).val() !== "") {
                    total += parseFloat($(this).val())
                }
            })
            $("#othersSubAmtTotal").val(total)
            calculateTDS()
            calculateNetValues()
            let currentArray = []
            $("#repeaterSub .newRow").each(function () {
                const select = $(this).find("select option:selected").val()
                const amount = $(this).find("input").val()
                currentArray.push({
                    select,
                    amount
                })
            }
            )
            localStorage.setItem("othersSub", JSON.stringify(currentArray))
            $("#kt_modal_stacked_4").modal("hide")
        }

        function saveOthersAdd() {
            let total = 0
            $("#kt_modal_stacked_3 .expense-amount").each(function () {
                if ($(this).val() !== "") {
                    total += parseFloat($(this).val())
                }
            })
            $("#othersAddAmtTotal").val(total)
            calculateTDS()
            calculateNetValues()
            let currentArray = []
            $("#repeaterAdd .newRow").each(function () {
                const select = $(this).find("select option:selected").val()
                const amount = $(this).find("input").val()
                currentArray.push({
                    select,
                    amount
                })
            }
            )
            localStorage.setItem("othersAdd", JSON.stringify(currentArray))
            $("#kt_modal_stacked_3").modal("hide")
        }

        $("#cashDate").flatpickr()
        $("#bankDate").flatpickr()
        $("#dieselDate").flatpickr()

        $("#cashDate").val(formattedDate)
        $("#bankDate").val(formattedDate)
        $("#dieselDate").val(formattedDate)
    </script>
    <script>
        $(document).ready(function () {
            localStorage.setItem("othersAdd", JSON.stringify([]))
            localStorage.setItem("othersSub", JSON.stringify([]))
            const newOBJ = {
                cashAdvanceAmount: 0,
                cashAdvanceLedger: "",
                cashAdvanceStatus: "due",
                cashAdvanceDate: formattedDate,
                chequeAdvanceAmount: 0,
                chequeAdvanceLedger: "",
                chequeAdvanceStatus: "due",
                chequeAdvanceDate: formattedDate,
                dieselAdvanceAmount: 0,
                dieselAdvanceLedger: "",
                dieselAdvanceStatus: "due",
                dieselAdvanceDate: formattedDate
            }
            localStorage.setItem("advanceDetails", JSON.stringify(newOBJ))

        })
    </script>

    <script>
        function editOthersAddBTN() {
            // we will save current state of othersAddAmtTotal
            const currentOthersSavedObject = localStorage.getItem("othersAdd");
            let currentOthersSaved = []
            if (currentOthersSavedObject) {
                currentOthersSaved = JSON.parse(currentOthersSavedObject);
            }
            $("#repeaterAdd").empty()
            if (currentOthersSaved.length > 0) {
                for (i = 0; i < currentOthersSaved.length; i++) {
                    const newRow = `
                     <div class="form-group newRow" data-rowid="${i}">
                                    <div class="form-group row mb-5">
                                        <div class="col-lg-5">
                                            <label class="form-label">Select Expense Type</label>
                                            <select name="othersAddLedger"
                                                class="form-select form-select-solid select-expense" data-control="select2"
                                                data-dropdown-parent="#kt_modal_stacked_3"
                                                data-placeholder="Select Expense Type">
                                                <option></option>
                                                <%directExpenses.forEach((data)=> {%> 
                                                    <option value="<%=data._id%>"><%=data.name%></option>
                                                    <%}) %>
                                            </select>
                                        </div>
                                        <div class="col-lg-5">
                                            <label class="form-label">Amount</label>
                                            <input oninput="validateNumberWithDecimals(this)" value="${currentOthersSaved[i].amount}" name="othersAddAmt"
                                                class="form-control form-control-solid expense-amount" disabled type="text"
                                                placeholder="Amount" />
                                        </div>
    
                                        <div class="col-lg-2">
                                            <button onclick="deleteRepeaterList('add', '${i}')"
                                                class="btn btn-flex btn-sm btn-light-danger mt-3 mt-md-9">
                                                <i class="ki-duotone ki-trash fs-3">
                                                    <span class="path1"></span>
                                                    <span class="path2"></span>
                                                    <span class="path3"></span>
                                                    <span class="path4"></span>
                                                    <span class="path5"></span></i>
    
                                            </button>
                                        </div>
                                    </div>
                                </div>
                         `

                    $("#repeaterAdd").append(newRow)
                    $(`#repeaterAdd .newRow[data-rowid="${i}"] select option[value="${currentOthersSaved[i].select}"]`).prop("selected", true)
                    $(`#repeaterAdd .newRow[data-rowid="${i}"] select`).select2()
                    $(`#repeaterAdd .newRow[data-rowid="${i}"] input`).prop("disabled", false)
                }
            }

        }


        function editOthersSubBTN() {
            // we will save current state of othersAddAmtTotal
            const currentOthersSavedObject = localStorage.getItem("othersSub");
            let currentOthersSaved = []
            if (currentOthersSavedObject) {
                currentOthersSaved = JSON.parse(currentOthersSavedObject);
            }
            $("#repeaterSub").empty()
            if (currentOthersSaved.length > 0) {
                for (i = 0; i < currentOthersSaved.length; i++) {
                    const newRow = `
                     <div class="form-group newRow" data-rowid="${i}">
                                    <div class="form-group row mb-5">
                                        <div class="col-lg-5">
                                            <label class="form-label">Select Expense Type</label>
                                            <select name="othersSubLedger"
                                                class="form-select form-select-solid select-expense" data-control="select2"
                                                data-dropdown-parent="#kt_modal_stacked_3"
                                                data-placeholder="Select Expense Type">
                                                <option></option>
                                                <%directExpenses.forEach((data)=> {%> 
                                                    <option value="<%=data._id%>"><%=data.name%></option>
                                                    <%}) %>
                                            </select>
                                        </div>
                                        <div class="col-lg-5">
                                            <label class="form-label">Amount</label>
                                            <input oninput="validateNumberWithDecimals(this)" value="${currentOthersSaved[i].amount}" name="othersSubAmt"
                                                class="form-control form-control-solid expense-amount" disabled type="text"
                                                placeholder="Amount" />
                                        </div>
    
                                        <div class="col-lg-2">
                                            <button onclick="deleteRepeaterList('sub', '${i}')"
                                                class="btn btn-flex btn-sm btn-light-danger mt-3 mt-md-9">
                                                <i class="ki-duotone ki-trash fs-3">
                                                    <span class="path1"></span>
                                                    <span class="path2"></span>
                                                    <span class="path3"></span>
                                                    <span class="path4"></span>
                                                    <span class="path5"></span></i>
    
                                            </button>
                                        </div>
                                    </div>
                                </div>
             `

                    $("#repeaterSub").append(newRow)
                    $(`#repeaterSub .newRow[data-rowid="${i}"] select option[value="${currentOthersSaved[i].select}"]`).prop("selected", true)
                    $(`#repeaterSub .newRow[data-rowid="${i}"] select`).select2()
                    $(`#repeaterSub .newRow[data-rowid="${i}"] input`).prop("disabled", false)
                }

            }
        }
    </script>


    <script>
        function createFreightMemo() {
            const fmNumber = $("#fmNumber").val()
            const fmDate = $("#fmDate").val()
            const challan = $("#challan").val()
            const from = $("#from").val()
            const to = $("#to").val()
            const vehicleNumber = $("#vehicleNumber").val()
            const owner = $("#owner").val()
            const broker = $("#broker").val()
            const accountTO = $("#accountTO").val()
            const pkg = $("#pkg").val()
            const actualWeight = $("#actualWeight").val()
            const chargedWeight = $("#chargedWeight").val()
            const rate = $("#rate").val()
            const rateON = $("#rateON").val()
            const freight = $("#freight").val()
            const hamali = $("#hamali").val()
            const othersAdd = $("#othersAdd").val()
            const othersSub = $("#othersSub").val()
            const mamul = $("#mamul").val()
            const unloading = $("#unloading").val()
            const tdsP = $("#tdsP").val()
            const tds = $("#tds").val()
            const netFreight = $("#netFreight").val()
            const advance = $("#advance").val()
            const balance = $("#balance").val()
            const payableAt = $("#payableAt").val()

            if (fmNumber === "" || fmDate === "" || challan === "" || from === "" || to === "" || vehicleNumber === "" || owner === "" || accountTO === "" || pkg === "" || actualWeight === "" || chargedWeight === "" || rate === "" || rateON === "" || freight === "" || hamali === "" || othersAdd === "" || othersSub === "" || mamul === "" || unloading === "" || tdsP === "" || tds === "" || netFreight === "" || advance === "" || balance === "" || payableAt === "") {
                showError("All fields are required")
                return
            }
            if (parseFloat(balance) < 0) {
                showError("Balance cannot be negative")
                return
            }
            if (parseFloat(advance) > parseFloat(netFreight)) {
                showError("Advance cannot be greater than net freight")
                return
            }
            if (parseFloat(netFreight) <= 0) {
                showError("Net freight cannot be zero or negative")
                return
            }
            editAdvanceDetails()
            editOthersAddBTN()
            editOthersSubBTN()


            const form = document.getElementById("fmForm");

            // Enable disabled inputs and selects
            const disabledInputs = form.querySelectorAll("input[disabled], select[disabled]");
            for (const input of disabledInputs) {
                input.removeAttribute("disabled");
            }

            // Serialize the form data
            const formData = new FormData(form);

            // Re-disable previously disabled inputs and selects
            for (const input of disabledInputs) {
                input.setAttribute("disabled", "disabled");
            }

            // Create a URLSearchParams object and add form data to it
            const data = new URLSearchParams();
            for (const pair of formData) {
                data.append(pair[0], pair[1]);
            }


            fetch("/transactions/accounts/freight-memo/new", {
                method: "POST",
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: data
            }).then((data) => {
                if (data.status === 400) {

                    return data.json().then((message) => {
                        Swal.fire({
                            text: message.message,
                            icon: "error",
                            buttonsStyling: !1,
                            confirmButtonText: "Ok, got it!",
                            customClass: {
                                confirmButton: "btn btn-primary"
                            }
                        }).then((response) => {
                            if (response.isConfirmed) {
                                $("#newLedgerBTN").attr("data-kt-indicator", "off")
                                $("#newLedgerBTN").attr("disabled", false)
                            }
                        })
                    })

                } else if (data.status === 200) {
                    Swal.fire({
                        text: "Freight Memo Created",
                        icon: "success",
                        buttonsStyling: !1,
                        confirmButtonText: "Ok, got it!",
                        customClass: {
                            confirmButton: "btn btn-primary"
                        }
                    }).then((response) => {
                        if (response.isConfirmed) {
                            location.reload()
                        }
                    })
                } else if (data.status === 401) {
                    Swal.fire({
                        text: "You are not authorized to perform this action",
                        icon: "error",
                        buttonsStyling: !1,
                        confirmButtonText: "Ok, got it!",
                        customClass: {
                            confirmButton: "btn btn-primary"
                        }
                    }).then((data) => {
                        if (data.isConfirmed) {
                            $("#newLedgerBTN").attr("data-kt-indicator", "off")
                            $("#newLedgerBTN").attr("disabled", false)

                        }
                    })
                }
            })



        }
    </script>
    <script>
        function editFM(id) {
            fetch(`/transactions/accounts/freight-memo/edit?id=${id}`, {
                method: "GET"
            }).then((res) => {
                if (res.status === 200) {
                    return res.json().then((data) => {
                        $("#fmNumber").attr("type", "text").val(data.number).prop("disabled", true)
                        $("#editID").val(data._id)
                        $("#fmDate").val(data.date)
                        $("#selectChallan").css("display", "none")
                        $("#displayChallan").css("display", "block")
                        
                        const newOption = `<option value="${data.challan._id}">${data.challan.number}</option>`
                        $("#displayChallanSelect").append(newOption).val(data.challan._id).prop("disabled", true).select2()
                        $("#from").val(data.challan.from.name)
                        $("#to").val(data.challan.to.name)
                        $("#vehicleNumber").val(data.challan.vehicle.number)
                        $("#owner").val(data.challan.vehicle.owner.name)
                        $("#accountTO").val(data.accountTo).prop("disabled",false).select2()
                        if (data.challan.vehicle.broker) {
                            $("#broker").prop("disabled", false)
                        }
    
                        $("#broker").val(data.challan.vehicle.broker.name)
                        let totalPKG = 0
                        let totalActualWeight = 0
                        let totalChargedWeight = 0
                        data.challan.material.forEach((item) => {
                            totalPKG += item.qty
                            totalActualWeight += item.actualWeight
                            totalChargedWeight += item.chargedWeight
                        })
                        $("#pkg").val(totalPKG)
                        $("#actualWeight").val(totalActualWeight)
                        $("#chargedWeight").val(totalChargedWeight)
                        $("#rate").val(data.rate)
                        $("#rateON").val(data.rateON).select2()
                        $("#freight").val(data.freight.amount)
                        $("#hamali").val(data.hamali.amount)
                        $("#mamul").val(data.mamul.amount)
                        $("#unloading").val(data.unloading.amount)
                        $("#tdsP").val(data.tdsP)
                        $("#tds").val(data.tds.amount)
                        $("#netFreight").val(data.netFreight)
                        $("#advance").val(data.advance)
                        $("#balance").val(data.balance.amount)
                        $("#payableAt").val(data.payableAt).select2()
                        $("#cashAmount").val(data.cashAdvance.cashAmount)
                        $("#cashLedger").val(data.cashAdvance.cashLedger).select2()
                        $("#cashStatus").val(data.cashAdvance.cashStatus).select2()
                        $("#cashDate").val(data.cashAdvance.cashDate)
                        $("#bankAmount").val(data.bankAdvance.bankAmount)
                        $("#bankLedger").val(data.bankAdvance.bankLedger).select2()
                        $("#bankStatus").val(data.bankAdvance.bankStatus).select2()
                        $("#bankDate").val(data.bankAdvance.bankDate)
                        $("#dieselAmount").val(data.dieselAdvance.dieselAmount)
                        $("#dieselLedger").val(data.dieselAdvance.dieselLedger).select2()
                        $("#dieselStatus").val(data.dieselAdvance.dieselStatus).select2()
                        $("#dieselDate").val(data.dieselAdvance.dieselDate)
                        saveAdvanceDetails()
                        //adding add other row
                        for (i = 0; i < data.othersAdd.length; i++) {
                            addRepeaterListEdit("add", data.othersAdd[i].ledger, data.othersAdd[i].amount)
                        }

                        //adding sub other row
                        for (i = 0; i < data.othersSub.length; i++) {
                            addRepeaterListEdit("sub", data.othersSub[i].ledger, data.othersSub[i].amount)
                        }

                        saveOthersAdd()
                        saveOthersSub()
                        let totalAddAmt = 0
                        data.othersAdd.forEach((item) => {
                            totalAddAmt += parseFloat(item.amount)
                        })
                        let totalSubAmt = 0
                        data.othersSub.forEach((item) => {
                            totalSubAmt += parseFloat(item.amount)
                        })

                        $("#othersAddAmtTotal").val(totalAddAmt)
                        $("#othersSubAmtTotal").val(totalSubAmt)
                        $("#title").text("Edit Freight Memo")
                        $("#fmSubmit").css("display", "none")
                        $("#fmUpdate").css("display", "block")
                        $("#kt_modal_2").modal("show")
                    })
                }
            })
        }
    </script>
    <script>
        function addRepeaterListEdit(forV, ledger, amount) {
            let div = $("#repeaterAdd")
            let length = $("#repeaterAdd .newRow").length
            let id = 3
            let text = "Add"
            if (forV === "sub") {
                div = $("#repeaterSub")
                length = $("#repeaterSub .newRow").length
                id = 4
                text = "Sub"
            }
            const newRow = `
            <div class="form-group newRow" data-rowid="${length}">
                                    <div class="form-group row mb-5">
                                        <div class="col-lg-5">
                                            <label class="form-label">Select Expense Type</label>
                                            <select name="others${text}Ledger"
                                                class="form-select form-select-solid select-expense" data-control="select2"
                                                data-dropdown-parent="#kt_modal_stacked_${id}"
                                                data-placeholder="Select Expense Type">
                                                <option></option>
                                                <%directExpenses.forEach((data)=> {%> 
                                                    <option value="<%=data._id%>"><%=data.name%></option>
                                                    <%}) %>
                                            </select>
                                        </div>
                                        <div class="col-lg-5">
                                            <label class="form-label">Amount</label>
                                            <input oninput="validateNumberWithDecimals(this)" value="${amount}" name="others${text}Amt"
                                                class="form-control form-control-solid expense-amount" disabled type="text"
                                                placeholder="Amount" />
                                        </div>
    
                                        <div class="col-lg-2">
                                            <button onclick="deleteRepeaterList('${forV}', '${length}')"
                                                class="btn btn-flex btn-sm btn-light-danger mt-3 mt-md-9">
                                                <i class="ki-duotone ki-trash fs-3">
                                                    <span class="path1"></span>
                                                    <span class="path2"></span>
                                                    <span class="path3"></span>
                                                    <span class="path4"></span>
                                                    <span class="path5"></span></i>
    
                                            </button>
                                        </div>
                                    </div>
                                </div>
            `
            div.append(newRow)
            if (forV == "sub") {
                //finding ledger and making it selected
                $(`#repeaterSub .newRow[data-rowid="${length}"] select option[value="${ledger}"]`).prop("selected", true)
                setTimeout(function () {
                    $(`#repeaterSub .newRow[data-rowid="${length}"] select`).select2()
                }, 100)
            } else {
                //finding ledger and making it selected
                $(`#repeaterAdd .newRow[data-rowid="${length}"] select option[value="${ledger}"]`).prop("selected", true)
                setTimeout(function () {
                    $(`#repeaterAdd .newRow[data-rowid="${length}"] select`).select2()
                }, 100)
            }
        }
    </script>

    <script>
        function updateFreightMemo() {
            const fmNumber = $("#fmNumber").val()
            const fmDate = $("#fmDate").val()
            const challan = $("#displayChallanSelect").val()
            const from = $("#from").val()
            const to = $("#to").val()
            const vehicleNumber = $("#vehicleNumber").val()
            const owner = $("#owner").val()
            const broker = $("#broker").val()
            const accountTO = $("#accountTO").val()
            const pkg = $("#pkg").val()
            const actualWeight = $("#actualWeight").val()
            const chargedWeight = $("#chargedWeight").val()
            const rate = $("#rate").val()
            const rateON = $("#rateON").val()
            const freight = $("#freight").val()
            const hamali = $("#hamali").val()
            const othersAdd = $("#othersAdd").val()
            const othersSub = $("#othersSub").val()
            const mamul = $("#mamul").val()
            const unloading = $("#unloading").val()
            const tdsP = $("#tdsP").val()
            const tds = $("#tds").val()
            const netFreight = $("#netFreight").val()
            const advance = $("#advance").val()
            const balance = $("#balance").val()
            const payableAt = $("#payableAt").val()

            if (fmNumber === "" || fmDate === "" || challan === "" || from === "" || to === "" || vehicleNumber === "" || owner === "" || accountTO === "" || pkg === "" || actualWeight === "" || chargedWeight === "" || rate === "" || rateON === "" || freight === "" || hamali === "" || othersAdd === "" || othersSub === "" || mamul === "" || unloading === "" || tdsP === "" || tds === "" || netFreight === "" || advance === "" || balance === "" || payableAt === "") {
                showError("All fields are required")
                return
            }
            if (parseFloat(balance) < 0) {
                showError("Balance cannot be negative")
                return
            }
            if (parseFloat(advance) > parseFloat(netFreight)) {
                showError("Advance cannot be greater than net freight")
                return
            }
            if (parseFloat(netFreight) <= 0) {
                showError("Net freight cannot be zero or negative")
                return
            }
            editAdvanceDetails()
            editOthersAddBTN()
            editOthersSubBTN()


            const form = document.getElementById("fmForm");

            // Enable disabled inputs and selects
            const disabledInputs = form.querySelectorAll("input[disabled], select[disabled]");
            for (const input of disabledInputs) {
                input.removeAttribute("disabled");
            }

            // Serialize the form data
            const formData = new FormData(form);

            // Re-disable previously disabled inputs and selects
            for (const input of disabledInputs) {
                input.setAttribute("disabled", "disabled");
            }

            // Create a URLSearchParams object and add form data to it
            const data = new URLSearchParams();
            for (const pair of formData) {
                data.append(pair[0], pair[1]);
            }


            fetch("/transactions/accounts/freight-memo/edit", {
                method: "POST",
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: data
            }).then((data) => {
                if (data.status === 400) {

                    return data.json().then((message) => {
                        Swal.fire({
                            text: message.message,
                            icon: "error",
                            buttonsStyling: !1,
                            confirmButtonText: "Ok, got it!",
                            customClass: {
                                confirmButton: "btn btn-primary"
                            }
                        }).then((response) => {
                            if (response.isConfirmed) {
                                $("#newLedgerBTN").attr("data-kt-indicator", "off")
                                $("#newLedgerBTN").attr("disabled", false)
                            }
                        })
                    })

                } else if (data.status === 200) {
                    Swal.fire({
                        text: "Freight Memo Updated",
                        icon: "success",
                        buttonsStyling: !1,
                        confirmButtonText: "Ok, got it!",
                        customClass: {
                            confirmButton: "btn btn-primary"
                        }
                    }).then((response) => {
                        if (response.isConfirmed) {
                            location.reload()
                        }
                    })
                } else if (data.status === 401) {
                    Swal.fire({
                        text: "You are not authorized to perform this action",
                        icon: "error",
                        buttonsStyling: !1,
                        confirmButtonText: "Ok, got it!",
                        customClass: {
                            confirmButton: "btn btn-primary"
                        }
                    }).then((data) => {
                        if (data.isConfirmed) {
                            $("#newLedgerBTN").attr("data-kt-indicator", "off")
                            $("#newLedgerBTN").attr("disabled", false)

                        }
                    })
                }
            })

        }
    </script>
    <script>
        function deleteFM(id) {
            Swal.fire({
                text: "Are you sure you want to delete this Invoice?",
                icon: "warning",
                showCancelButton: !0,
                buttonsStyling: !1,
                confirmButtonText: "Yes, delete!",
                cancelButtonText: "No, cancel",
                customClass: {
                    confirmButton: "btn fw-bold btn-danger",
                    cancelButton: "btn fw-bold btn-active-light-primary"
                }
            }).then(response => {
                if (response.isConfirmed) {
                    // Send the form data to the server

                    fetch(`/transactions/accounts/freight-memo/delete?id=${id}`, {
                        method: "GET"
                    }).then((data) => {
                        if (data.status === 400) {

                            return data.json().then((message) => {
                                Swal.fire({
                                    text: message.message,
                                    icon: "error",
                                    buttonsStyling: !1,
                                    confirmButtonText: "Ok, got it!",
                                    customClass: {
                                        confirmButton: "btn btn-primary"
                                    }
                                })
                            })

                        } else if (data.status === 200) {
                            Swal.fire({
                                text: "Payment Voucher Deleted",
                                icon: "success",
                                buttonsStyling: !1,
                                confirmButtonText: "Ok, got it!",
                                customClass: {
                                    confirmButton: "btn btn-primary"
                                }
                            }).then((response) => {
                                if (response.isConfirmed) {
                                    location.reload()
                                }
                            })
                        } else if (data.status === 401) {
                            Swal.fire({
                                text: "You are not authorized to perform this action",
                                icon: "error",
                                buttonsStyling: !1,
                                confirmButtonText: "Ok, got it!",
                                customClass: {
                                    confirmButton: "btn btn-primary"
                                }
                            }).then((data) => {
                                if (data.isConfirmed) {
                                    i.setAttribute("data-kt-indicator", "off")
                                    i.disabled = 0
                                    n.hide()
                                    e.reset()
                                }
                            })
                        }
                    })
                }
            })

        }
    </script>

    <%} %>